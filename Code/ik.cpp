/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2016-05-01 16:36:48.475441
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[1]);
x1=IKcos(j[2]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKsin(j[1]);
x5=IKcos(j[4]);
x6=IKsin(j[2]);
x7=IKsin(j[4]);
x8=IKcos(j[6]);
x9=IKcos(j[5]);
x10=IKsin(j[5]);
x11=IKsin(j[6]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((0.045)*x6);
x15=((0.045)*x1);
x16=((1.0)*x11);
x17=((1.0)*x8);
x18=((1.0)*x10);
x19=((1.0)*x9);
x20=((0.3)*x1);
x21=((1.0)*x1);
x22=((0.06)*x1);
x23=(x5*x6);
x24=(x0*x2);
x25=(x1*x7);
x26=(x2*x6);
x27=(x0*x3);
x28=(x2*x4);
x29=(x3*x4);
x30=((1.0)*x28);
x31=((0.3)*x26);
x32=(x14*x3);
x33=((1.0)*x6*x7);
x34=((0.06)*x6*x7);
x35=(x18*x26);
x36=((0.06)*x26*x9);
x37=(x33*x4);
x38=(((x1*x5))+(((-1.0)*x3*x33)));
x39=(((x23*x3))+x25);
x40=((((-1.0)*x30))+((x1*x27)));
x41=((((-1.0)*x21*x28))+x27);
x42=(((x1*x29))+x24);
x43=((((-1.0)*x21*x24))+(((-1.0)*x29)));
x44=(((x21*x24))+(((1.0)*x29)));
x45=(((x22*x7))+(((0.06)*x23*x3)));
x46=(x42*x5);
x47=(x40*x5);
x48=(x31+x36+x14);
x49=((((-1.0)*x0*x33))+x47);
x50=((((-1.0)*x35))+((x39*x9)));
x51=((((-1.0)*x37))+x46);
x52=((((-1.0)*x0*x23))+((x7*(((((-1.0)*x21*x27))+x30)))));
x53=((((-1.0)*x19*x39))+x35);
x54=(x51*x9);
x55=((((1.0)*x23*x4))+((x7*(((((1.0)*x24))+(((1.0)*x21*x29)))))));
x56=(x11*x53);
x57=(((x10*x49))+((x44*x9)));
x58=(((x11*x52))+((x8*((((x10*x43))+((x49*x9)))))));
x59=(((x11*(((((-1.0)*x18*x43))+(((-1.0)*x19*x49))))))+((x52*x8)));
x60=((((-1.0)*x15*x27))+((x0*x15))+(((0.3)*x29))+((x10*(((((-1.0)*x0*x34))+(((0.06)*x47))))))+((x9*((((x22*x24))+(((0.06)*x29))))))+((x20*x24))+(((0.045)*x28))+(((0.55)*x4)));
eerot[0]=(((x13*x58))+((x12*(((((-1.0)*x16*x38))+(((-1.0)*x17*x50)))))));
eerot[1]=(((x13*x59))+((x12*(((((-1.0)*x17*x38))+(((-1.0)*x16*x53)))))));
eerot[2]=(((x13*x57))+((x12*(((((-1.0)*x18*x39))+(((-1.0)*x19*x26)))))));
eetrans[0]=((0.22)+((x13*x60))+((x12*(((((-1.0)*x48))+(((-1.0)*x18*x45))+x32)))));
eerot[3]=(((x12*x58))+((x13*((((x50*x8))+((x11*x38)))))));
eerot[4]=(((x12*x59))+((x13*((x56+((x38*x8)))))));
eerot[5]=(((x12*x57))+((x13*((((x10*x39))+((x26*x9)))))));
eetrans[1]=((0.14)+((x12*x60))+((x13*(((((-1.0)*x32))+((x10*x45))+x48)))));
eerot[6]=(((x11*x55))+((x8*(((((-1.0)*x18*x41))+(((-1.0)*x19*x51)))))));
eerot[7]=(((x11*((((x10*x41))+x54))))+((x55*x8)));
eerot[8]=(((x41*x9))+((x10*(((((-1.0)*x46))+x37)))));
IkReal x61=((1.0)*x28);
eetrans[2]=((0.346)+((x9*(((((0.06)*x27))+(((-1.0)*x22*x61))))))+(((-1.0)*x20*x61))+(((0.3)*x27))+(((-1.0)*x15*x4))+((x10*((((x34*x4))+(((-0.06)*x46))))))+(((0.045)*x24))+(((0.55)*x0))+((x15*x29)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=(((r00*(IKcos(j0))))+((r10*(IKsin(j0)))));
new_r01=(((r01*(IKcos(j0))))+((r11*(IKsin(j0)))));
new_r02=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
IkReal x62=IKcos(j0);
IkReal x63=IKsin(j0);
new_px=((((-0.06)*r12*x63))+(((-0.06)*r02*x62))+(((-0.22)*x62))+(((-0.14)*x63))+((px*x62))+((py*x63)));
new_r10=((-1.0)*r20);
new_r11=((-1.0)*r21);
new_r12=((-1.0)*r22);
new_py=((0.346)+(((-1.0)*pz))+(((0.06)*r22)));
new_r20=((((-1.0)*r00*(IKsin(j0))))+((r10*(IKcos(j0)))));
new_r21=((((-1.0)*r01*(IKsin(j0))))+((r11*(IKcos(j0)))));
new_r22=((((-1.0)*r02*(IKsin(j0))))+((r12*(IKcos(j0)))));
IkReal x64=IKsin(j0);
IkReal x65=IKcos(j0);
new_pz=((((-0.06)*r12*x65))+(((-0.14)*x65))+(((-1.0)*px*x64))+(((0.22)*x64))+((py*x65))+(((0.06)*r02*x64)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x66=((1.0)*px);
IkReal x67=((1.0)*pz);
IkReal x68=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x68))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x67)));
rxp0_2=((((-1.0)*r10*x66))+((py*r00)));
rxp1_0=((((-1.0)*r21*x68))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x67)));
rxp1_2=((((-1.0)*r11*x66))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x68)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x67)));
rxp2_2=((((-1.0)*r12*x66))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((1.18441410190393)+(((-2.9867963734811)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.18441410190393)+(((-2.9867963734811)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x69=IKasin(((1.18441410190393)+(((-2.9867963734811)*pp))));
j3array[0]=((-1.34027003705633)+(((-1.0)*x69)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.80132261653346)+x69);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[2];
j1eval[0]=((px*px)+(py*py));
j1eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[4];
j1eval[0]=1.21;
j1eval[1]=py;
j1eval[2]=(pp+(((-1.0)*(pz*pz))));
j1eval[3]=((py*py*py*py)+(((px*px)*(py*py))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  || IKabs(j1eval[3]) < 0.0000010000000000  )
{
{
IkReal j1eval[4];
j1eval[0]=((((px*px)*(py*py)))+(px*px*px*px));
j1eval[1]=1.21;
j1eval[2]=px;
j1eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  || IKabs(j1eval[3]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x70=px*px;
CheckValue<IkReal> x73 = IKatan2WithCheck(IkReal(((-1.1)*px*py)),((1.1)*x70),IKFAST_ATAN2_MAGTHRESH);
if(!x73.valid){
continue;
}
IkReal x71=((1.0)*(x73.value));
if((((((1.21)*x70*(py*py)))+(((1.21)*(x70*x70))))) < -0.00001)
continue;
CheckValue<IkReal> x74=IKPowWithIntegerCheck(IKabs(IKsqrt(((((1.21)*x70*(py*py)))+(((1.21)*(x70*x70)))))),-1);
if(!x74.valid){
continue;
}
if( (((x74.value)*(((((-1.0)*pp*px))+(((0.027)*px*sj3))+(((-0.00405)*cj3*px))+(((-0.20845)*px)))))) < -1-IKFAST_SINCOS_THRESH || (((x74.value)*(((((-1.0)*pp*px))+(((0.027)*px*sj3))+(((-0.00405)*cj3*px))+(((-0.20845)*px)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x72=IKasin(((x74.value)*(((((-1.0)*pp*px))+(((0.027)*px*sj3))+(((-0.00405)*cj3*px))+(((-0.20845)*px))))));
j1array[0]=((((-1.0)*x71))+(((-1.0)*x72)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x71))+x72);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x75=IKsin(j1);
IkReal x76=IKcos(j1);
IkReal x77=((1.0)*py);
IkReal x78=(px*x75);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+x78+(((-1.0)*x76*x77)));
evalcond[1]=((((1.1)*py*x78))+(((-0.00405)*cj3*py))+(((-1.1)*x76*(py*py)))+(((-1.0)*pp*x77))+(((0.027)*py*sj3))+(((-0.20845)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
j2eval[0]=((1.0)+(((6.66666666666667)*sj3))+(((-1.0)*cj3)));
j2eval[1]=IKsign(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))));
j2eval[2]=((IKabs(pz))+(IKabs((((cj1*px))+((py*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x79=cj1*cj1;
IkReal x80=py*py;
IkReal x81=(cj1*px);
IkReal x82=((3.0)*pz);
IkReal x83=((0.3)*sj3);
IkReal x84=(py*sj1);
IkReal x85=((0.045)*x84);
IkReal x86=((pz*pz)+(((-1.0)*x79*x80))+x80+(((2.0)*x81*x84))+((x79*(px*px))));
j2eval[0]=x86;
j2eval[1]=IKsign(x86);
j2eval[2]=((IKabs((x82+(((20.0)*pz*sj3))+(((-1.0)*cj3*x82)))))+(((66.6666666666667)*(IKabs((((x81*x83))+(((-0.045)*cj3*x81))+(((0.045)*x81))+x85+((x83*x84))+(((-1.0)*cj3*x85))))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x87=(cj1*px);
IkReal x88=((6.66666666666667)*sj3);
IkReal x89=(py*sj1);
IkReal x90=((1.0)*cj3);
j2eval[0]=((((-1.0)*x87*x90))+x89+x87+((x88*x89))+(((-1.0)*x89*x90))+((x87*x88)));
j2eval[1]=((1.0)+x88+(((-1.0)*x90)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.43937254880879)+j3)))), 6.28318530717959)));
evalcond[1]=((0.062500000246)+(((-1.0)*pp)));
evalcond[2]=((-0.25000000015)+(((-1.0)*cj1*py))+((px*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((1111111111.11111)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1111111111.11111)*pz))+IKsqr(((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((1111111111.11111)*pz), ((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x91=IKsin(j2);
IkReal x92=IKcos(j2);
IkReal x93=(cj1*px);
IkReal x94=((1.0)*pz);
IkReal x95=(py*sj1);
IkReal x96=((0.09)*x92);
IkReal x97=((1.0)*x92);
evalcond[0]=((((9.0e-10)*x91))+(((-1.0)*x94)));
evalcond[1]=((((9.0e-10)*x92))+(((-1.0)*x95))+(((-1.0)*x93)));
evalcond[2]=((((-1.0)*x92*x94))+((x91*x93))+((x91*x95)));
evalcond[3]=((9.0e-10)+(((-1.0)*x95*x97))+(((-1.0)*x91*x94))+(((-1.0)*x93*x97)));
evalcond[4]=((-0.275000000246)+(((1.1)*px*sj1))+((x93*x96))+(((-1.1)*cj1*py))+((x95*x96))+(((0.09)*pz*x91)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x847=(cj1*px);
IkReal x848=(py*sj1);
IkReal x849=((0.045)*cj3);
IkReal x850=((0.3)*sj3);
CheckValue<IkReal> x851=IKPowWithIntegerCheck((((x848*x850))+(((-1.0)*x847*x849))+((x847*x850))+(((0.045)*x847))+(((0.045)*x848))+(((-1.0)*x848*x849))),-1);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852=IKPowWithIntegerCheck(((0.045)+(((-1.0)*x849))+x850),-1);
if(!x852.valid){
continue;
}
if( IKabs(((x851.value)*((((pz*x847))+((pz*x848)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x852.value)*((x847+x848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x851.value)*((((pz*x847))+((pz*x848))))))+IKsqr(((x852.value)*((x847+x848))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x851.value)*((((pz*x847))+((pz*x848))))), ((x852.value)*((x847+x848))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x853=IKsin(j2);
IkReal x854=IKcos(j2);
IkReal x855=(cj1*px);
IkReal x856=(py*sj1);
IkReal x857=((0.045)*cj3);
IkReal x858=((1.0)*pz);
IkReal x859=((0.3)*sj3);
IkReal x860=((0.09)*x854);
IkReal x861=((1.0)*x854);
evalcond[0]=(((x853*x856))+((x853*x855))+(((-1.0)*x854*x858)));
evalcond[1]=((((-1.0)*x858))+(((0.045)*x853))+(((-1.0)*x853*x857))+((x853*x859)));
evalcond[2]=((((0.045)*x854))+(((-1.0)*x855))+(((-1.0)*x856))+((x854*x859))+(((-1.0)*x854*x857)));
evalcond[3]=((0.045)+(((-1.0)*x857))+(((-1.0)*x853*x858))+(((-1.0)*x856*x861))+x859+(((-1.0)*x855*x861)));
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+(((0.09)*pz*x853))+((x855*x860))+((x856*x860))+(((-1.0)*pp))+(((-1.1)*cj1*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x862=cj1*cj1;
IkReal x863=py*py;
IkReal x864=(cj1*px);
IkReal x865=((0.3)*sj3);
IkReal x866=((0.045)*pz);
IkReal x867=(py*sj1);
IkReal x868=((0.045)*x867);
CheckValue<IkReal> x869=IKPowWithIntegerCheck(IKsign((((x862*(px*px)))+(((2.0)*x864*x867))+(pz*pz)+x863+(((-1.0)*x862*x863)))),-1);
if(!x869.valid){
continue;
}
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x866))+((pz*x865))+x866)),((((0.045)*x864))+(((-1.0)*cj3*x868))+(((-0.045)*cj3*x864))+x868+((x865*x867))+((x864*x865))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x869.value)))+(x870.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x871=IKsin(j2);
IkReal x872=IKcos(j2);
IkReal x873=(cj1*px);
IkReal x874=(py*sj1);
IkReal x875=((0.045)*cj3);
IkReal x876=((1.0)*pz);
IkReal x877=((0.3)*sj3);
IkReal x878=((0.09)*x872);
IkReal x879=((1.0)*x872);
evalcond[0]=((((-1.0)*x872*x876))+((x871*x874))+((x871*x873)));
evalcond[1]=(((x871*x877))+(((-1.0)*x871*x875))+(((0.045)*x871))+(((-1.0)*x876)));
evalcond[2]=(((x872*x877))+(((-1.0)*x872*x875))+(((0.045)*x872))+(((-1.0)*x873))+(((-1.0)*x874)));
evalcond[3]=((0.045)+(((-1.0)*x871*x876))+(((-1.0)*x873*x879))+(((-1.0)*x874*x879))+x877+(((-1.0)*x875)));
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+((x874*x878))+((x873*x878))+(((-1.0)*pp))+(((-1.1)*cj1*py))+(((0.09)*pz*x871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(pz),(((cj1*px))+((py*sj1))),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(IKsign(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))),-1);
if(!x881.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x880.value)+(((1.5707963267949)*(x881.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x882=IKsin(j2);
IkReal x883=IKcos(j2);
IkReal x884=(cj1*px);
IkReal x885=(py*sj1);
IkReal x886=((0.045)*cj3);
IkReal x887=((1.0)*pz);
IkReal x888=((0.3)*sj3);
IkReal x889=((0.09)*x883);
IkReal x890=((1.0)*x883);
evalcond[0]=((((-1.0)*x883*x887))+((x882*x885))+((x882*x884)));
evalcond[1]=((((-1.0)*x882*x886))+((x882*x888))+(((-1.0)*x887))+(((0.045)*x882)));
evalcond[2]=((((-1.0)*x883*x886))+((x883*x888))+(((-1.0)*x885))+(((-1.0)*x884))+(((0.045)*x883)));
evalcond[3]=((0.045)+(((-1.0)*x884*x890))+(((-1.0)*x882*x887))+(((-1.0)*x886))+(((-1.0)*x885*x890))+x888);
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+(((0.09)*pz*x882))+(((-1.0)*pp))+(((-1.1)*cj1*py))+((x885*x889))+((x884*x889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x891=py*py;
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal(((-1.1)*x891)),((1.1)*px*py),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
IkReal x892=((1.0)*(x894.value));
if((((((1.21)*(x891*x891)))+(((1.21)*x891*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x895=IKPowWithIntegerCheck(IKabs(IKsqrt(((((1.21)*(x891*x891)))+(((1.21)*x891*(px*px)))))),-1);
if(!x895.valid){
continue;
}
if( (((x895.value)*(((((-1.0)*pp*py))+(((-0.00405)*cj3*py))+(((0.027)*py*sj3))+(((-0.20845)*py)))))) < -1-IKFAST_SINCOS_THRESH || (((x895.value)*(((((-1.0)*pp*py))+(((-0.00405)*cj3*py))+(((0.027)*py*sj3))+(((-0.20845)*py)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x893=IKasin(((x895.value)*(((((-1.0)*pp*py))+(((-0.00405)*cj3*py))+(((0.027)*py*sj3))+(((-0.20845)*py))))));
j1array[0]=((((-1.0)*x892))+(((-1.0)*x893)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x892))+x893);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x896=IKsin(j1);
IkReal x897=IKcos(j1);
IkReal x898=(py*x897);
evalcond[0]=((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))+((px*x896))+(((-1.0)*x898)));
evalcond[1]=((((-1.1)*px*x898))+(((-1.0)*pp*px))+(((0.027)*px*sj3))+(((-0.00405)*cj3*px))+(((1.1)*x896*(px*px)))+(((-0.20845)*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
j2eval[0]=((1.0)+(((6.66666666666667)*sj3))+(((-1.0)*cj3)));
j2eval[1]=IKsign(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))));
j2eval[2]=((IKabs(pz))+(IKabs((((cj1*px))+((py*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x899=cj1*cj1;
IkReal x900=py*py;
IkReal x901=(cj1*px);
IkReal x902=((3.0)*pz);
IkReal x903=((0.3)*sj3);
IkReal x904=(py*sj1);
IkReal x905=((0.045)*x904);
IkReal x906=((((2.0)*x901*x904))+(pz*pz)+((x899*(px*px)))+(((-1.0)*x899*x900))+x900);
j2eval[0]=x906;
j2eval[1]=IKsign(x906);
j2eval[2]=((IKabs(((((-1.0)*cj3*x902))+x902+(((20.0)*pz*sj3)))))+(((66.6666666666667)*(IKabs(((((-0.045)*cj3*x901))+((x903*x904))+((x901*x903))+(((0.045)*x901))+(((-1.0)*cj3*x905))+x905))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x907=(cj1*px);
IkReal x908=((6.66666666666667)*sj3);
IkReal x909=(py*sj1);
IkReal x910=((1.0)*cj3);
j2eval[0]=(((x907*x908))+(((-1.0)*x907*x910))+((x908*x909))+x907+x909+(((-1.0)*x909*x910)));
j2eval[1]=((1.0)+(((-1.0)*x910))+x908);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.43937254880879)+j3)))), 6.28318530717959)));
evalcond[1]=((0.062500000246)+(((-1.0)*pp)));
evalcond[2]=((-0.25000000015)+(((-1.0)*cj1*py))+((px*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((1111111111.11111)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1111111111.11111)*pz))+IKsqr(((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((1111111111.11111)*pz), ((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x911=IKsin(j2);
IkReal x912=IKcos(j2);
IkReal x913=(cj1*px);
IkReal x914=((1.0)*pz);
IkReal x915=(py*sj1);
IkReal x916=((0.09)*x912);
IkReal x917=((1.0)*x912);
evalcond[0]=((((-1.0)*x914))+(((9.0e-10)*x911)));
evalcond[1]=((((9.0e-10)*x912))+(((-1.0)*x915))+(((-1.0)*x913)));
evalcond[2]=(((x911*x913))+((x911*x915))+(((-1.0)*x912*x914)));
evalcond[3]=((9.0e-10)+(((-1.0)*x913*x917))+(((-1.0)*x911*x914))+(((-1.0)*x915*x917)));
evalcond[4]=((-0.275000000246)+(((1.1)*px*sj1))+(((0.09)*pz*x911))+(((-1.1)*cj1*py))+((x915*x916))+((x913*x916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x918=(cj1*px);
IkReal x919=(py*sj1);
IkReal x920=((0.045)*cj3);
IkReal x921=((0.3)*sj3);
CheckValue<IkReal> x922=IKPowWithIntegerCheck((((x918*x921))+((x919*x921))+(((0.045)*x918))+(((0.045)*x919))+(((-1.0)*x918*x920))+(((-1.0)*x919*x920))),-1);
if(!x922.valid){
continue;
}
CheckValue<IkReal> x923=IKPowWithIntegerCheck(((0.045)+(((-1.0)*x920))+x921),-1);
if(!x923.valid){
continue;
}
if( IKabs(((x922.value)*((((pz*x918))+((pz*x919)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x923.value)*((x919+x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x922.value)*((((pz*x918))+((pz*x919))))))+IKsqr(((x923.value)*((x919+x918))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x922.value)*((((pz*x918))+((pz*x919))))), ((x923.value)*((x919+x918))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x924=IKsin(j2);
IkReal x925=IKcos(j2);
IkReal x926=(cj1*px);
IkReal x927=(py*sj1);
IkReal x928=((0.045)*cj3);
IkReal x929=((1.0)*pz);
IkReal x930=((0.3)*sj3);
IkReal x931=((0.09)*x925);
IkReal x932=((1.0)*x925);
evalcond[0]=((((-1.0)*x925*x929))+((x924*x926))+((x924*x927)));
evalcond[1]=((((-1.0)*x929))+((x924*x930))+(((-1.0)*x924*x928))+(((0.045)*x924)));
evalcond[2]=((((-1.0)*x925*x928))+(((-1.0)*x926))+(((-1.0)*x927))+((x925*x930))+(((0.045)*x925)));
evalcond[3]=((0.045)+(((-1.0)*x928))+(((-1.0)*x924*x929))+(((-1.0)*x927*x932))+(((-1.0)*x926*x932))+x930);
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+(((0.09)*pz*x924))+((x927*x931))+(((-1.0)*pp))+(((-1.1)*cj1*py))+((x926*x931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x933=cj1*cj1;
IkReal x934=py*py;
IkReal x935=(cj1*px);
IkReal x936=((0.3)*sj3);
IkReal x937=((0.045)*pz);
IkReal x938=(py*sj1);
IkReal x939=((0.045)*x938);
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x937))+((pz*x936))+x937)),(((x936*x938))+(((-1.0)*cj3*x939))+(((-0.045)*cj3*x935))+((x935*x936))+x939+(((0.045)*x935))),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
CheckValue<IkReal> x941=IKPowWithIntegerCheck(IKsign(((((2.0)*x935*x938))+(pz*pz)+((x933*(px*px)))+(((-1.0)*x933*x934))+x934)),-1);
if(!x941.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x940.value)+(((1.5707963267949)*(x941.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x942=IKsin(j2);
IkReal x943=IKcos(j2);
IkReal x944=(cj1*px);
IkReal x945=(py*sj1);
IkReal x946=((0.045)*cj3);
IkReal x947=((1.0)*pz);
IkReal x948=((0.3)*sj3);
IkReal x949=((0.09)*x943);
IkReal x950=((1.0)*x943);
evalcond[0]=(((x942*x944))+((x942*x945))+(((-1.0)*x943*x947)));
evalcond[1]=((((-1.0)*x947))+(((-1.0)*x942*x946))+((x942*x948))+(((0.045)*x942)));
evalcond[2]=(((x943*x948))+(((-1.0)*x945))+(((-1.0)*x944))+(((-1.0)*x943*x946))+(((0.045)*x943)));
evalcond[3]=((0.045)+(((-1.0)*x946))+(((-1.0)*x944*x950))+(((-1.0)*x942*x947))+(((-1.0)*x945*x950))+x948);
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+((x945*x949))+(((-1.0)*pp))+((x944*x949))+(((-1.1)*cj1*py))+(((0.09)*pz*x942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x951 = IKatan2WithCheck(IkReal(pz),(((cj1*px))+((py*sj1))),IKFAST_ATAN2_MAGTHRESH);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952=IKPowWithIntegerCheck(IKsign(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))),-1);
if(!x952.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x951.value)+(((1.5707963267949)*(x952.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x953=IKsin(j2);
IkReal x954=IKcos(j2);
IkReal x955=(cj1*px);
IkReal x956=(py*sj1);
IkReal x957=((0.045)*cj3);
IkReal x958=((1.0)*pz);
IkReal x959=((0.3)*sj3);
IkReal x960=((0.09)*x954);
IkReal x961=((1.0)*x954);
evalcond[0]=((((-1.0)*x954*x958))+((x953*x956))+((x953*x955)));
evalcond[1]=((((0.045)*x953))+(((-1.0)*x953*x957))+(((-1.0)*x958))+((x953*x959)));
evalcond[2]=((((0.045)*x954))+(((-1.0)*x955))+(((-1.0)*x956))+(((-1.0)*x954*x957))+((x954*x959)));
evalcond[3]=((0.045)+(((-1.0)*x956*x961))+(((-1.0)*x953*x958))+(((-1.0)*x955*x961))+(((-1.0)*x957))+x959);
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+(((-1.0)*pp))+((x956*x960))+(((0.09)*pz*x953))+(((-1.1)*cj1*py))+((x955*x960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x964 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x964.valid){
continue;
}
IkReal x962=((1.0)*(x964.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x965=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x965.valid){
continue;
}
if( (((-1.0)*(x965.value)*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x965.value)*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x963=((-1.0)*(IKasin(((-1.0)*(x965.value)*(((-0.55)+(((-0.045)*sj3))+(((-0.3)*cj3))))))));
j1array[0]=((((-1.0)*x962))+(((-1.0)*x963)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((1.0)*x963))+(((-1.0)*x962)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j2eval[3];
j2eval[0]=((1.0)+(((6.66666666666667)*sj3))+(((-1.0)*cj3)));
j2eval[1]=IKsign(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3))));
j2eval[2]=((IKabs(pz))+(IKabs((((cj1*px))+((py*sj1))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x966=cj1*cj1;
IkReal x967=py*py;
IkReal x968=(cj1*px);
IkReal x969=((3.0)*pz);
IkReal x970=((0.3)*sj3);
IkReal x971=(py*sj1);
IkReal x972=((0.045)*x971);
IkReal x973=(((x966*(px*px)))+(pz*pz)+(((2.0)*x968*x971))+x967+(((-1.0)*x966*x967)));
j2eval[0]=x973;
j2eval[1]=IKsign(x973);
j2eval[2]=((IKabs(((((-1.0)*cj3*x969))+x969+(((20.0)*pz*sj3)))))+(((66.6666666666667)*(IKabs(((((0.045)*x968))+(((-1.0)*cj3*x972))+((x968*x970))+((x970*x971))+(((-0.045)*cj3*x968))+x972))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x974=(cj1*px);
IkReal x975=((6.66666666666667)*sj3);
IkReal x976=(py*sj1);
IkReal x977=((1.0)*cj3);
j2eval[0]=(((x975*x976))+(((-1.0)*x974*x977))+(((-1.0)*x976*x977))+((x974*x975))+x974+x976);
j2eval[1]=((1.0)+x975+(((-1.0)*x977)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.43937254880879)+j3)))), 6.28318530717959)));
evalcond[1]=((0.062500000246)+(((-1.0)*pp)));
evalcond[2]=((-0.25000000015)+(((-1.0)*cj1*py))+((px*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((1111111111.11111)*pz)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1111111111.11111)*pz))+IKsqr(((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((1111111111.11111)*pz), ((((1111111111.11111)*py*sj1))+(((1111111111.11111)*cj1*px))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x978=IKsin(j2);
IkReal x979=IKcos(j2);
IkReal x980=(cj1*px);
IkReal x981=((1.0)*pz);
IkReal x982=(py*sj1);
IkReal x983=((0.09)*x979);
IkReal x984=((1.0)*x979);
evalcond[0]=((((-1.0)*x981))+(((9.0e-10)*x978)));
evalcond[1]=((((-1.0)*x980))+(((-1.0)*x982))+(((9.0e-10)*x979)));
evalcond[2]=((((-1.0)*x979*x981))+((x978*x980))+((x978*x982)));
evalcond[3]=((9.0e-10)+(((-1.0)*x982*x984))+(((-1.0)*x978*x981))+(((-1.0)*x980*x984)));
evalcond[4]=((-0.275000000246)+(((1.1)*px*sj1))+((x982*x983))+(((-1.1)*cj1*py))+(((0.09)*pz*x978))+((x980*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x985=(cj1*px);
IkReal x986=(py*sj1);
IkReal x987=((0.045)*cj3);
IkReal x988=((0.3)*sj3);
CheckValue<IkReal> x989=IKPowWithIntegerCheck(((((0.045)*x986))+(((0.045)*x985))+((x986*x988))+(((-1.0)*x986*x987))+((x985*x988))+(((-1.0)*x985*x987))),-1);
if(!x989.valid){
continue;
}
CheckValue<IkReal> x990=IKPowWithIntegerCheck(((0.045)+(((-1.0)*x987))+x988),-1);
if(!x990.valid){
continue;
}
if( IKabs(((x989.value)*((((pz*x986))+((pz*x985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x990.value)*((x985+x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x989.value)*((((pz*x986))+((pz*x985))))))+IKsqr(((x990.value)*((x985+x986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((x989.value)*((((pz*x986))+((pz*x985))))), ((x990.value)*((x985+x986))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x991=IKsin(j2);
IkReal x992=IKcos(j2);
IkReal x993=(cj1*px);
IkReal x994=(py*sj1);
IkReal x995=((0.045)*cj3);
IkReal x996=((1.0)*pz);
IkReal x997=((0.3)*sj3);
IkReal x998=((0.09)*x992);
IkReal x999=((1.0)*x992);
evalcond[0]=(((x991*x993))+((x991*x994))+(((-1.0)*x992*x996)));
evalcond[1]=(((x991*x997))+(((-1.0)*x991*x995))+(((0.045)*x991))+(((-1.0)*x996)));
evalcond[2]=((((-1.0)*x993))+(((-1.0)*x994))+((x992*x997))+(((-1.0)*x992*x995))+(((0.045)*x992)));
evalcond[3]=((0.045)+(((-1.0)*x994*x999))+(((-1.0)*x991*x996))+(((-1.0)*x995))+(((-1.0)*x993*x999))+x997);
evalcond[4]=((-0.2125)+((x993*x998))+(((1.1)*px*sj1))+((x994*x998))+(((0.09)*pz*x991))+(((-1.0)*pp))+(((-1.1)*cj1*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1000=cj1*cj1;
IkReal x1001=py*py;
IkReal x1002=(cj1*px);
IkReal x1003=((0.3)*sj3);
IkReal x1004=((0.045)*pz);
IkReal x1005=(py*sj1);
IkReal x1006=((0.045)*x1005);
CheckValue<IkReal> x1007 = IKatan2WithCheck(IkReal((x1004+(((-1.0)*cj3*x1004))+((pz*x1003)))),((((-0.045)*cj3*x1002))+x1006+(((-1.0)*cj3*x1006))+(((0.045)*x1002))+((x1002*x1003))+((x1003*x1005))),IKFAST_ATAN2_MAGTHRESH);
if(!x1007.valid){
continue;
}
CheckValue<IkReal> x1008=IKPowWithIntegerCheck(IKsign((((x1000*(px*px)))+x1001+(pz*pz)+(((2.0)*x1002*x1005))+(((-1.0)*x1000*x1001)))),-1);
if(!x1008.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1007.value)+(((1.5707963267949)*(x1008.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1009=IKsin(j2);
IkReal x1010=IKcos(j2);
IkReal x1011=(cj1*px);
IkReal x1012=(py*sj1);
IkReal x1013=((0.045)*cj3);
IkReal x1014=((1.0)*pz);
IkReal x1015=((0.3)*sj3);
IkReal x1016=((0.09)*x1010);
IkReal x1017=((1.0)*x1010);
evalcond[0]=((((-1.0)*x1010*x1014))+((x1009*x1011))+((x1009*x1012)));
evalcond[1]=(((x1009*x1015))+(((-1.0)*x1009*x1013))+(((-1.0)*x1014))+(((0.045)*x1009)));
evalcond[2]=((((-1.0)*x1010*x1013))+(((0.045)*x1010))+((x1010*x1015))+(((-1.0)*x1012))+(((-1.0)*x1011)));
evalcond[3]=((0.045)+(((-1.0)*x1012*x1017))+(((-1.0)*x1011*x1017))+x1015+(((-1.0)*x1009*x1014))+(((-1.0)*x1013)));
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+(((0.09)*pz*x1009))+(((-1.0)*pp))+((x1012*x1016))+(((-1.1)*cj1*py))+((x1011*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1018 = IKatan2WithCheck(IkReal(pz),(((cj1*px))+((py*sj1))),IKFAST_ATAN2_MAGTHRESH);
if(!x1018.valid){
continue;
}
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign(((0.045)+(((-0.045)*cj3))+(((0.3)*sj3)))),-1);
if(!x1019.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1018.value)+(((1.5707963267949)*(x1019.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1020=IKsin(j2);
IkReal x1021=IKcos(j2);
IkReal x1022=(cj1*px);
IkReal x1023=(py*sj1);
IkReal x1024=((0.045)*cj3);
IkReal x1025=((1.0)*pz);
IkReal x1026=((0.3)*sj3);
IkReal x1027=((0.09)*x1021);
IkReal x1028=((1.0)*x1021);
evalcond[0]=((((-1.0)*x1021*x1025))+((x1020*x1022))+((x1020*x1023)));
evalcond[1]=((((0.045)*x1020))+(((-1.0)*x1025))+(((-1.0)*x1020*x1024))+((x1020*x1026)));
evalcond[2]=((((-1.0)*x1023))+(((-1.0)*x1022))+(((-1.0)*x1021*x1024))+(((0.045)*x1021))+((x1021*x1026)));
evalcond[3]=((0.045)+x1026+(((-1.0)*x1023*x1028))+(((-1.0)*x1022*x1028))+(((-1.0)*x1024))+(((-1.0)*x1020*x1025)));
evalcond[4]=((-0.2125)+(((1.1)*px*sj1))+((x1023*x1027))+(((-1.0)*pp))+((x1022*x1027))+(((0.09)*pz*x1020))+(((-1.1)*cj1*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x98=(sj2*sj3);
IkReal x99=(cj3*sj1);
IkReal x100=(cj3*sj2);
IkReal x101=(cj1*cj3);
IkReal x102=(sj1*sj3);
IkReal x103=((1.0)*sj2);
IkReal x104=(cj1*sj3);
IkReal x105=(((cj2*x99))+x104);
IkReal x106=(((cj2*x101))+(((-1.0)*x102)));
IkReal x107=(((cj2*x102))+(((-1.0)*x101)));
IkReal x108=(((cj2*x104))+x99);
new_r00=(((r10*x105))+((r20*x100))+((r00*x106)));
new_r01=(((r21*x100))+((r01*x106))+((r11*x105)));
new_r02=(((r02*x106))+((r22*x100))+((r12*x105)));
new_r10=((((-1.0)*r10*sj1*x103))+((cj2*r20))+(((-1.0)*cj1*r00*x103)));
new_r11=((((-1.0)*r11*sj1*x103))+((cj2*r21))+(((-1.0)*cj1*r01*x103)));
new_r12=((((-1.0)*r12*sj1*x103))+(((-1.0)*cj1*r02*x103))+((cj2*r22)));
new_r20=(((r10*x107))+((r20*x98))+((r00*x108)));
new_r21=(((r21*x98))+((r01*x108))+((r11*x107)));
new_r22=(((r02*x108))+((r12*x107))+((r22*x98)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
IkReal x109=(sj2*sj3);
IkReal x110=(cj3*sj1);
IkReal x111=(cj3*sj2);
IkReal x112=(cj1*cj3);
IkReal x113=(sj1*sj3);
IkReal x114=((1.0)*sj2);
IkReal x115=(cj1*sj3);
IkReal x116=(((cj2*x110))+x115);
IkReal x117=x106;
IkReal x118=x107;
IkReal x119=(((cj2*x115))+x110);
new_r00=(((r10*x116))+((r20*x111))+((r00*x117)));
new_r01=(((r21*x111))+((r11*x116))+((r01*x117)));
new_r02=(((r22*x111))+((r02*x117))+((r12*x116)));
new_r10=((((-1.0)*r10*sj1*x114))+((cj2*r20))+(((-1.0)*cj1*r00*x114)));
new_r11=((((-1.0)*r11*sj1*x114))+((cj2*r21))+(((-1.0)*cj1*r01*x114)));
new_r12=((((-1.0)*r12*sj1*x114))+(((-1.0)*cj1*r02*x114))+((cj2*r22)));
new_r20=(((r10*x118))+((r20*x109))+((r00*x119)));
new_r21=(((r21*x109))+((r11*x118))+((r01*x119)));
new_r22=(((r02*x119))+((r22*x109))+((r12*x118)));
IkReal x120=((1.0)*sj1);
IkReal x121=(cj1*r02);
IkReal x122=(cj2*cj3);
j4eval[0]=sj5;
j4eval[1]=((IKabs(((((-1.0)*sj2*x121))+((cj2*r22))+(((-1.0)*r12*sj2*x120)))))+(IKabs((((x121*x122))+((r12*sj1*x122))+((cj3*r22*sj2))+((cj1*r12*sj3))+(((-1.0)*r02*sj3*x120))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x123=(sj2*sj3);
IkReal x124=(cj3*sj1);
IkReal x125=(cj3*sj2);
IkReal x126=(cj1*cj3);
IkReal x127=(sj1*sj3);
IkReal x128=((1.0)*sj2);
IkReal x129=(cj1*sj3);
IkReal x130=(((cj2*x124))+x129);
IkReal x131=x106;
IkReal x132=x107;
IkReal x133=(((cj2*x129))+x124);
new_r00=(((r00*x131))+((r20*x125))+((r10*x130)));
new_r01=(((r21*x125))+((r01*x131))+((r11*x130)));
new_r02=(((r02*x131))+((r22*x125))+((r12*x130)));
new_r10=((((-1.0)*cj1*r00*x128))+(((-1.0)*r10*sj1*x128))+((cj2*r20)));
new_r11=(((cj2*r21))+(((-1.0)*cj1*r01*x128))+(((-1.0)*r11*sj1*x128)));
new_r12=((((-1.0)*r12*sj1*x128))+(((-1.0)*cj1*r02*x128))+((cj2*r22)));
new_r20=(((r00*x133))+((r20*x123))+((r10*x132)));
new_r21=(((r21*x123))+((r01*x133))+((r11*x132)));
new_r22=(((r02*x133))+((r22*x123))+((r12*x132)));
IkReal x134=(cj3*sj1);
IkReal x135=((1.0)*r00);
IkReal x136=(sj2*sj3);
IkReal x137=(cj1*cj3);
IkReal x138=(cj2*sj1*sj3);
IkReal x139=(cj1*cj2*sj3);
j6eval[0]=sj5;
j6eval[1]=((IKabs(((((-1.0)*x135*x139))+(((-1.0)*x134*x135))+(((-1.0)*r10*x138))+(((-1.0)*r20*x136))+((r10*x137)))))+(IKabs((((r21*x136))+((r01*x139))+((r01*x134))+((r11*x138))+(((-1.0)*r11*x137))))));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x140=(sj2*sj3);
IkReal x141=(cj3*sj1);
IkReal x142=(cj3*sj2);
IkReal x143=(cj1*cj3);
IkReal x144=(sj1*sj3);
IkReal x145=((1.0)*sj2);
IkReal x146=(cj1*sj3);
IkReal x147=(((cj2*x141))+x146);
IkReal x148=x106;
IkReal x149=x107;
IkReal x150=(((cj2*x146))+x141);
new_r00=(((r20*x142))+((r00*x148))+((r10*x147)));
new_r01=(((r01*x148))+((r21*x142))+((r11*x147)));
new_r02=(((r02*x148))+((r22*x142))+((r12*x147)));
new_r10=(((cj2*r20))+(((-1.0)*cj1*r00*x145))+(((-1.0)*r10*sj1*x145)));
new_r11=((((-1.0)*cj1*r01*x145))+((cj2*r21))+(((-1.0)*r11*sj1*x145)));
new_r12=((((-1.0)*cj1*r02*x145))+((cj2*r22))+(((-1.0)*r12*sj1*x145)));
new_r20=(((r20*x140))+((r00*x150))+((r10*x149)));
new_r21=(((r01*x150))+((r21*x140))+((r11*x149)));
new_r22=(((r02*x150))+((r22*x140))+((r12*x149)));
j4eval[0]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x151=(sj2*sj3);
IkReal x152=(cj3*sj1);
IkReal x153=(cj3*sj2);
IkReal x154=(cj1*cj3);
IkReal x155=(sj1*sj3);
IkReal x156=((1.0)*sj2);
IkReal x157=(cj1*sj3);
IkReal x158=(((cj2*x152))+x157);
IkReal x159=x106;
IkReal x160=x107;
IkReal x161=(((cj2*x157))+x152);
sj5=0;
cj5=1.0;
j5=0;
new_r00=(((r20*x153))+((r00*x159))+((r10*x158)));
new_r01=(((r01*x159))+((r21*x153))+((r11*x158)));
new_r02=(((r22*x153))+((r02*x159))+((r12*x158)));
new_r10=(((cj2*r20))+(((-1.0)*cj1*r00*x156))+(((-1.0)*r10*sj1*x156)));
new_r11=((((-1.0)*cj1*r01*x156))+((cj2*r21))+(((-1.0)*r11*sj1*x156)));
new_r12=((((-1.0)*cj1*r02*x156))+((cj2*r22))+(((-1.0)*r12*sj1*x156)));
new_r20=(((r00*x161))+((r20*x151))+((r10*x160)));
new_r21=(((r01*x161))+((r21*x151))+((r11*x160)));
new_r22=(((r12*x160))+((r22*x151))+((r02*x161)));
IkReal x162=((1.0)*sj1);
IkReal x163=(cj1*r02);
IkReal x164=(cj2*cj3);
j4eval[0]=((IKabs((((cj3*r22*sj2))+((cj1*r12*sj3))+((r12*sj1*x164))+((x163*x164))+(((-1.0)*r02*sj3*x162)))))+(IKabs(((((-1.0)*sj2*x163))+((cj2*r22))+(((-1.0)*r12*sj2*x162))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x165=(sj2*sj3);
IkReal x166=(cj3*sj1);
IkReal x167=(cj3*sj2);
IkReal x168=(cj1*cj3);
IkReal x169=(sj1*sj3);
IkReal x170=((1.0)*sj2);
IkReal x171=(cj1*sj3);
IkReal x172=(((cj2*x166))+x171);
IkReal x173=x106;
IkReal x174=x107;
IkReal x175=(x166+((cj2*x171)));
sj5=0;
cj5=1.0;
j5=0;
new_r00=(((r00*x173))+((r20*x167))+((r10*x172)));
new_r01=(((r01*x173))+((r21*x167))+((r11*x172)));
new_r02=(((r22*x167))+((r12*x172))+((r02*x173)));
new_r10=((((-1.0)*r10*sj1*x170))+((cj2*r20))+(((-1.0)*cj1*r00*x170)));
new_r11=(((cj2*r21))+(((-1.0)*r11*sj1*x170))+(((-1.0)*cj1*r01*x170)));
new_r12=((((-1.0)*r12*sj1*x170))+((cj2*r22))+(((-1.0)*cj1*r02*x170)));
new_r20=(((r00*x175))+((r20*x165))+((r10*x174)));
new_r21=(((r01*x175))+((r21*x165))+((r11*x174)));
new_r22=(((r22*x165))+((r12*x174))+((r02*x175)));
IkReal x176=(cj2*cj3);
IkReal x177=((1.0)*sj2);
IkReal x178=(cj1*r02);
IkReal x179=((1.0)*r12*sj1);
j4eval[0]=((IKabs(((((-1.0)*cj1*r12*sj3))+(((-1.0)*x176*x179))+((r02*sj1*sj3))+(((-1.0)*x176*x178))+(((-1.0)*cj3*r22*x177)))))+(IKabs(((((-1.0)*x177*x178))+(((-1.0)*r12*sj1*x177))+((cj2*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j6]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x181 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x181.valid){
continue;
}
IkReal x180=x181.value;
j4array[0]=((-1.0)*x180);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x180)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j4))))+((new_r12*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x182=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x182))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x182))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x182))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x182))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x183=IKsin(j6);
IkReal x184=IKcos(j6);
IkReal x185=((1.0)*sj4);
IkReal x186=((1.0)*x184);
IkReal x187=(sj4*x183);
IkReal x188=(sj4*x184);
IkReal x189=(cj4*x183);
IkReal x190=(cj4*x186);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x183);
evalcond[1]=(x188+x189+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x186)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x183))+(((-1.0)*new_r00*x185)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x186))+(((-1.0)*new_r01*x185)));
evalcond[5]=((((-1.0)*x190))+x187+new_r00);
evalcond[6]=((((-1.0)*x190))+x187+new_r11);
evalcond[7]=((((-1.0)*x189))+(((-1.0)*x184*x185))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x192.valid){
continue;
}
IkReal x191=x192.value;
j4array[0]=((-1.0)*x191);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x191)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x193=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x193))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x193))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x193))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x193))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x194=IKsin(j6);
IkReal x195=IKcos(j6);
IkReal x196=((1.0)*sj4);
IkReal x197=((1.0)*x195);
IkReal x198=(sj4*x194);
IkReal x199=(sj4*x195);
IkReal x200=(cj4*x194);
IkReal x201=(cj4*x197);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x194);
evalcond[1]=(x199+x200+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x197)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x194))+(((-1.0)*new_r00*x196)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x197))+(((-1.0)*new_r01*x196)));
evalcond[5]=(x198+(((-1.0)*x201))+new_r00);
evalcond[6]=(x198+(((-1.0)*x201))+new_r11);
evalcond[7]=((((-1.0)*x195*x196))+new_r10+(((-1.0)*x200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x202=(sj2*sj3);
IkReal x203=(cj3*sj1);
IkReal x204=(cj3*sj2);
IkReal x205=(cj1*cj3);
IkReal x206=(sj1*sj3);
IkReal x207=((1.0)*sj2);
IkReal x208=(cj1*sj3);
IkReal x209=(((cj2*x203))+x208);
IkReal x210=x106;
IkReal x211=x107;
IkReal x212=(((cj2*x208))+x203);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r00=(((r10*x209))+((r20*x204))+((r00*x210)));
new_r01=(((r11*x209))+((r21*x204))+((r01*x210)));
new_r02=(((r22*x204))+((r02*x210))+((r12*x209)));
new_r10=(((cj2*r20))+(((-1.0)*cj1*r00*x207))+(((-1.0)*r10*sj1*x207)));
new_r11=(((cj2*r21))+(((-1.0)*r11*sj1*x207))+(((-1.0)*cj1*r01*x207)));
new_r12=((((-1.0)*cj1*r02*x207))+(((-1.0)*r12*sj1*x207))+((cj2*r22)));
new_r20=(((r20*x202))+((r00*x212))+((r10*x211)));
new_r21=(((r11*x211))+((r21*x202))+((r01*x212)));
new_r22=(((r22*x202))+((r12*x211))+((r02*x212)));
IkReal x213=((1.0)*sj1);
IkReal x214=(cj1*r02);
IkReal x215=(cj2*cj3);
j4eval[0]=((IKabs((((r12*sj1*x215))+((x214*x215))+((cj3*r22*sj2))+(((-1.0)*r02*sj3*x213))+((cj1*r12*sj3)))))+(IKabs(((((-1.0)*sj2*x214))+((cj2*r22))+(((-1.0)*r12*sj2*x213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x216=(sj2*sj3);
IkReal x217=(cj3*sj1);
IkReal x218=(cj3*sj2);
IkReal x219=(cj1*cj3);
IkReal x220=(sj1*sj3);
IkReal x221=((1.0)*sj2);
IkReal x222=(cj1*sj3);
IkReal x223=(((cj2*x217))+x222);
IkReal x224=x106;
IkReal x225=x107;
IkReal x226=(((cj2*x222))+x217);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r00=(((r00*x224))+((r10*x223))+((r20*x218)));
new_r01=(((r21*x218))+((r01*x224))+((r11*x223)));
new_r02=(((r12*x223))+((r22*x218))+((r02*x224)));
new_r10=((((-1.0)*r10*sj1*x221))+(((-1.0)*cj1*r00*x221))+((cj2*r20)));
new_r11=((((-1.0)*r11*sj1*x221))+(((-1.0)*cj1*r01*x221))+((cj2*r21)));
new_r12=(((cj2*r22))+(((-1.0)*r12*sj1*x221))+(((-1.0)*cj1*r02*x221)));
new_r20=(((r00*x226))+((r10*x225))+((r20*x216)));
new_r21=(((r21*x216))+((r01*x226))+((r11*x225)));
new_r22=(((r12*x225))+((r22*x216))+((r02*x226)));
IkReal x227=(cj2*cj3);
IkReal x228=((1.0)*sj2);
IkReal x229=(cj1*r02);
IkReal x230=((1.0)*r12*sj1);
j4eval[0]=((IKabs(((((-1.0)*x228*x229))+((cj2*r22))+(((-1.0)*r12*sj1*x228)))))+(IKabs(((((-1.0)*x227*x230))+(((-1.0)*cj1*r12*sj3))+(((-1.0)*cj3*r22*x228))+(((-1.0)*x227*x229))+((r02*sj1*sj3))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j6]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x232 = IKatan2WithCheck(IkReal(new_r12),((-1.0)*new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x232.valid){
continue;
}
IkReal x231=x232.value;
j4array[0]=((-1.0)*x231);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x231)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r02*(IKcos(j4))))+((new_r12*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x233=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj4*x233))+((cj4*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x233))+((cj4*new_r01))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj4*x233))+((cj4*new_r01))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x233))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x234=IKcos(j6);
IkReal x235=IKsin(j6);
IkReal x236=((1.0)*sj4);
IkReal x237=((1.0)*x235);
IkReal x238=(sj4*x234);
IkReal x239=((1.0)*x234);
IkReal x240=(cj4*x237);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x234);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x237)));
evalcond[2]=(((sj4*x235))+((cj4*x234))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x237))+(((-1.0)*new_r00*x236)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x239))+(((-1.0)*new_r01*x236)));
evalcond[5]=(x238+(((-1.0)*x240))+new_r01);
evalcond[6]=(x238+(((-1.0)*x240))+new_r10);
evalcond[7]=((((-1.0)*x235*x236))+(((-1.0)*cj4*x239))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x242 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x242.valid){
continue;
}
IkReal x241=x242.value;
j4array[0]=((-1.0)*x241);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x241)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r12*(IKcos(j4))))+(((-1.0)*new_r02*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x243=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x243))+(((-1.0)*new_r01*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x243))))+IKsqr(((((-1.0)*cj4*x243))+(((-1.0)*new_r01*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x243))), ((((-1.0)*cj4*x243))+(((-1.0)*new_r01*sj4))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x244=IKcos(j6);
IkReal x245=IKsin(j6);
IkReal x246=((1.0)*sj4);
IkReal x247=((1.0)*x245);
IkReal x248=(sj4*x244);
IkReal x249=((1.0)*x244);
IkReal x250=(cj4*x247);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x244);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x247)));
evalcond[2]=(((cj4*x244))+new_r00+((sj4*x245)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x246))+(((-1.0)*x247)));
evalcond[4]=((((-1.0)*new_r01*x246))+((cj4*new_r11))+(((-1.0)*x249)));
evalcond[5]=(x248+new_r01+(((-1.0)*x250)));
evalcond[6]=(x248+new_r10+(((-1.0)*x250)));
evalcond[7]=((((-1.0)*cj4*x249))+(((-1.0)*x245*x246))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x252=IKPowWithIntegerCheck(sj5,-1);
if(!x252.valid){
continue;
}
IkReal x251=x252.value;
CheckValue<IkReal> x253=IKPowWithIntegerCheck(new_r12,-1);
if(!x253.valid){
continue;
}
if( IKabs((x251*(x253.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x251)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x251*(x253.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x251))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x251*(x253.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x251));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x254=IKcos(j4);
IkReal x255=IKsin(j4);
IkReal x256=((1.0)*sj5);
IkReal x257=((1.0)*cj5);
IkReal x258=(new_r12*x255);
IkReal x259=(new_r02*x254);
evalcond[0]=((((-1.0)*x254*x256))+new_r02);
evalcond[1]=((((-1.0)*x255*x256))+new_r12);
evalcond[2]=(((new_r12*x254))+(((-1.0)*new_r02*x255)));
evalcond[3]=(x258+x259+(((-1.0)*x256)));
evalcond[4]=(((cj5*x258))+((cj5*x259))+(((-1.0)*new_r22*x256)));
evalcond[5]=((((-1.0)*new_r00*x254*x256))+(((-1.0)*new_r20*x257))+(((-1.0)*new_r10*x255*x256)));
evalcond[6]=((((-1.0)*new_r21*x257))+(((-1.0)*new_r11*x255*x256))+(((-1.0)*new_r01*x254*x256)));
evalcond[7]=((1.0)+(((-1.0)*x256*x259))+(((-1.0)*x256*x258))+(((-1.0)*new_r22*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
IkReal x260=(sj2*sj3);
IkReal x261=(cj3*sj1);
IkReal x262=(cj3*sj2);
IkReal x263=(cj1*cj3);
IkReal x264=(sj1*sj3);
IkReal x265=((1.0)*sj2);
IkReal x266=(cj1*sj3);
IkReal x267=(x266+((cj2*x261)));
IkReal x268=x106;
IkReal x269=x107;
IkReal x270=(x261+((cj2*x266)));
new_r00=(((r00*x268))+((r10*x267))+((r20*x262)));
new_r01=(((r21*x262))+((r11*x267))+((r01*x268)));
new_r02=(((r22*x262))+((r02*x268))+((r12*x267)));
new_r10=((((-1.0)*r10*sj1*x265))+(((-1.0)*cj1*r00*x265))+((cj2*r20)));
new_r11=((((-1.0)*r11*sj1*x265))+(((-1.0)*cj1*r01*x265))+((cj2*r21)));
new_r12=((((-1.0)*r12*sj1*x265))+(((-1.0)*cj1*r02*x265))+((cj2*r22)));
new_r20=(((r10*x269))+((r00*x270))+((r20*x260)));
new_r21=(((r21*x260))+((r01*x270))+((r11*x269)));
new_r22=(((r02*x270))+((r22*x260))+((r12*x269)));
IkReal x271=(cj3*sj1);
IkReal x272=((1.0)*r00);
IkReal x273=(sj2*sj3);
IkReal x274=(cj1*cj3);
IkReal x275=(cj2*sj1*sj3);
IkReal x276=(cj1*cj2*sj3);
j6eval[0]=sj5;
j6eval[1]=((IKabs(((((-1.0)*x272*x276))+(((-1.0)*r20*x273))+(((-1.0)*x271*x272))+(((-1.0)*r10*x275))+((r10*x274)))))+(IKabs((((r21*x273))+(((-1.0)*r11*x274))+((r01*x271))+((r01*x276))+((r11*x275))))));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x277=(sj2*sj3);
IkReal x278=(cj3*sj1);
IkReal x279=(cj3*sj2);
IkReal x280=(cj1*cj3);
IkReal x281=(sj1*sj3);
IkReal x282=((1.0)*sj2);
IkReal x283=(cj1*sj3);
IkReal x284=(x283+((cj2*x278)));
IkReal x285=x106;
IkReal x286=x107;
IkReal x287=(((cj2*x283))+x278);
new_r00=(((r00*x285))+((r10*x284))+((r20*x279)));
new_r01=(((r01*x285))+((r11*x284))+((r21*x279)));
new_r02=(((r22*x279))+((r02*x285))+((r12*x284)));
new_r10=(((cj2*r20))+(((-1.0)*cj1*r00*x282))+(((-1.0)*r10*sj1*x282)));
new_r11=((((-1.0)*r11*sj1*x282))+(((-1.0)*cj1*r01*x282))+((cj2*r21)));
new_r12=((((-1.0)*r12*sj1*x282))+((cj2*r22))+(((-1.0)*cj1*r02*x282)));
new_r20=(((r00*x287))+((r10*x286))+((r20*x277)));
new_r21=(((r01*x287))+((r11*x286))+((r21*x277)));
new_r22=(((r22*x277))+((r02*x287))+((r12*x286)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x288=(sj2*sj3);
IkReal x289=(cj3*sj1);
IkReal x290=(cj3*sj2);
IkReal x291=(cj1*cj3);
IkReal x292=(sj1*sj3);
IkReal x293=((1.0)*sj2);
IkReal x294=(cj1*sj3);
IkReal x295=(((cj2*x289))+x294);
IkReal x296=x106;
IkReal x297=x107;
IkReal x298=(((cj2*x294))+x289);
new_r00=(((r20*x290))+((r00*x296))+((r10*x295)));
new_r01=(((r01*x296))+((r21*x290))+((r11*x295)));
new_r02=(((r12*x295))+((r02*x296))+((r22*x290)));
new_r10=((((-1.0)*cj1*r00*x293))+((cj2*r20))+(((-1.0)*r10*sj1*x293)));
new_r11=((((-1.0)*cj1*r01*x293))+((cj2*r21))+(((-1.0)*r11*sj1*x293)));
new_r12=((((-1.0)*cj1*r02*x293))+(((-1.0)*r12*sj1*x293))+((cj2*r22)));
new_r20=(((r00*x298))+((r10*x297))+((r20*x288)));
new_r21=(((r21*x288))+((r01*x298))+((r11*x297)));
new_r22=(((r12*x297))+((r22*x288))+((r02*x298)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x299=(new_r22+(((-1.0)*cj5)));
IkReal x300=((((-1.0)*sj5))+new_r12);
IkReal x301=((1.0)*cj5);
IkReal x302=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x299;
evalcond[2]=x299;
evalcond[3]=new_r02;
evalcond[4]=x300;
evalcond[5]=x300;
evalcond[6]=((((-1.0)*new_r22*x302))+((cj5*new_r12)));
evalcond[7]=((((-1.0)*new_r20*x301))+(((-1.0)*new_r10*x302)));
evalcond[8]=((((-1.0)*new_r21*x301))+(((-1.0)*new_r11*x302)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x301))+(((-1.0)*new_r12*x302)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x303=(sj2*sj3);
IkReal x304=(cj3*sj1);
IkReal x305=(cj3*sj2);
IkReal x306=(cj1*cj3);
IkReal x307=(sj1*sj3);
IkReal x308=((1.0)*sj2);
IkReal x309=(cj1*sj3);
IkReal x310=(((cj2*x304))+x309);
IkReal x311=x106;
IkReal x312=x107;
IkReal x313=(((cj2*x309))+x304);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r00=(((r20*x305))+((r00*x311))+((r10*x310)));
new_r01=(((r11*x310))+((r21*x305))+((r01*x311)));
new_r02=(((r22*x305))+((r02*x311))+((r12*x310)));
new_r10=(((cj2*r20))+(((-1.0)*r10*sj1*x308))+(((-1.0)*cj1*r00*x308)));
new_r11=((((-1.0)*r11*sj1*x308))+(((-1.0)*cj1*r01*x308))+((cj2*r21)));
new_r12=((((-1.0)*r12*sj1*x308))+((cj2*r22))+(((-1.0)*cj1*r02*x308)));
new_r20=(((r20*x303))+((r00*x313))+((r10*x312)));
new_r21=(((r11*x312))+((r21*x303))+((r01*x313)));
new_r22=(((r22*x303))+((r02*x313))+((r12*x312)));
IkReal x314=(cj3*sj1);
IkReal x315=((1.0)*r00);
IkReal x316=(sj2*sj3);
IkReal x317=(cj1*cj3);
IkReal x318=(cj2*sj1*sj3);
IkReal x319=(cj1*cj2*sj3);
j6eval[0]=((IKabs((((r11*x318))+(((-1.0)*r11*x317))+((r01*x314))+((r01*x319))+((r21*x316)))))+(IKabs(((((-1.0)*r20*x316))+(((-1.0)*r10*x318))+(((-1.0)*x315*x319))+(((-1.0)*x314*x315))+((r10*x317))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
IkReal x320=(sj2*sj3);
IkReal x321=(cj3*sj1);
IkReal x322=(cj3*sj2);
IkReal x323=(cj1*cj3);
IkReal x324=(sj1*sj3);
IkReal x325=((1.0)*sj2);
IkReal x326=(cj1*sj3);
IkReal x327=(((cj2*x321))+x326);
IkReal x328=x106;
IkReal x329=x107;
IkReal x330=(((cj2*x326))+x321);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r00=(((r20*x322))+((r00*x328))+((r10*x327)));
new_r01=(((r21*x322))+((r11*x327))+((r01*x328)));
new_r02=(((r02*x328))+((r12*x327))+((r22*x322)));
new_r10=((((-1.0)*cj1*r00*x325))+(((-1.0)*r10*sj1*x325))+((cj2*r20)));
new_r11=((((-1.0)*cj1*r01*x325))+(((-1.0)*r11*sj1*x325))+((cj2*r21)));
new_r12=((((-1.0)*cj1*r02*x325))+((cj2*r22))+(((-1.0)*r12*sj1*x325)));
new_r20=(((r00*x330))+((r20*x320))+((r10*x329)));
new_r21=(((r01*x330))+((r21*x320))+((r11*x329)));
new_r22=(((r12*x329))+((r02*x330))+((r22*x320)));
IkReal x331=((1.0)*sj2);
j6eval[0]=((IKabs(((((-1.0)*r10*sj1*x331))+((cj2*r20))+(((-1.0)*cj1*r00*x331)))))+(IKabs((((cj1*r01*sj2))+(((-1.0)*cj2*r21))+((r11*sj1*sj2))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(new_r12,-1);
if(!x332.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x332.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x332.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x332.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x333=IKsin(j6);
IkReal x334=IKcos(j6);
IkReal x335=((1.0)*new_r12);
IkReal x336=((1.0)*x334);
evalcond[0]=(((new_r12*x334))+new_r20);
evalcond[1]=(((new_r22*x333))+new_r11);
evalcond[2]=((((-1.0)*x333*x335))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x336))+new_r10);
evalcond[4]=((((-1.0)*x333))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x336))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x335))+x333+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x335))+(((-1.0)*x336))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x337 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),new_r10,IKFAST_ATAN2_MAGTHRESH);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338=IKPowWithIntegerCheck(IKsign(new_r22),-1);
if(!x338.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x337.value)+(((1.5707963267949)*(x338.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x339=IKsin(j6);
IkReal x340=IKcos(j6);
IkReal x341=((1.0)*new_r12);
IkReal x342=((1.0)*x340);
evalcond[0]=(((new_r12*x340))+new_r20);
evalcond[1]=(((new_r22*x339))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x339*x341)));
evalcond[3]=(new_r10+(((-1.0)*new_r22*x342)));
evalcond[4]=((((-1.0)*x339))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x342)));
evalcond[6]=(x339+((new_r11*new_r22))+(((-1.0)*new_r21*x341)));
evalcond[7]=((((-1.0)*new_r20*x341))+((new_r10*new_r22))+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x343 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x343.valid){
continue;
}
CheckValue<IkReal> x344=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x344.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x343.value)+(((1.5707963267949)*(x344.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x345=IKsin(j6);
IkReal x346=IKcos(j6);
IkReal x347=((1.0)*new_r12);
IkReal x348=((1.0)*x346);
evalcond[0]=(((new_r12*x346))+new_r20);
evalcond[1]=(((new_r22*x345))+new_r11);
evalcond[2]=((((-1.0)*x345*x347))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x348)));
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x345)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x348)));
evalcond[6]=(x345+((new_r11*new_r22))+(((-1.0)*new_r21*x347)));
evalcond[7]=((((-1.0)*new_r20*x347))+((new_r10*new_r22))+(((-1.0)*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x349=(new_r22+(((-1.0)*cj5)));
IkReal x350=((1.0)*cj5);
IkReal x351=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x349;
evalcond[2]=x349;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x351))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r22*x351))+(((-1.0)*new_r12*x350)));
evalcond[7]=(((new_r10*sj5))+(((-1.0)*new_r20*x350)));
evalcond[8]=(((new_r11*sj5))+(((-1.0)*new_r21*x350)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x350))+((new_r12*sj5)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x352=IKsin(j6);
IkReal x353=IKcos(j6);
IkReal x354=((1.0)*new_r22);
IkReal x355=((1.0)*x353);
evalcond[0]=(new_r21+((new_r12*x352)));
evalcond[1]=((((-1.0)*x352))+new_r00);
evalcond[2]=((((-1.0)*x355))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x355))+new_r20);
evalcond[4]=(((new_r22*x352))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x353*x354)));
evalcond[6]=(x352+((new_r12*new_r21))+(((-1.0)*new_r11*x354)));
evalcond[7]=((((-1.0)*x355))+((new_r12*new_r20))+(((-1.0)*new_r10*x354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x356=((1.0)*cj4);
IkReal x357=((1.0)*sj4);
IkReal x358=(((cj4*new_r12))+(((-1.0)*new_r02*x357)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x356))+new_r02);
evalcond[3]=((((-1.0)*x357))+new_r12);
evalcond[4]=x358;
evalcond[5]=x358;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x356))+(((-1.0)*new_r10*x357)));
evalcond[10]=((((-1.0)*new_r01*x356))+(((-1.0)*new_r11*x357)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x357))+(((-1.0)*new_r02*x356)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x359=IKcos(j6);
IkReal x360=IKsin(j6);
IkReal x361=((1.0)*new_r12);
IkReal x362=((1.0)*x360);
IkReal x363=((1.0)*x359);
evalcond[0]=(x359+new_r20);
evalcond[1]=((((-1.0)*x362))+new_r21);
evalcond[2]=(new_r01+((new_r12*x359)));
evalcond[3]=(new_r00+((new_r12*x360)));
evalcond[4]=(new_r11+(((-1.0)*new_r02*x363)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x362)));
evalcond[6]=((((-1.0)*new_r00*x361))+(((-1.0)*x362))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x363))+((new_r02*new_r11))+(((-1.0)*new_r01*x361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x364=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x365=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x366=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x367=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x364;
evalcond[5]=x364;
evalcond[6]=x367;
evalcond[7]=x366;
evalcond[8]=x365;
evalcond[9]=x365;
evalcond[10]=x366;
evalcond[11]=x367;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x368=IKcos(j6);
IkReal x369=IKsin(j6);
IkReal x370=((1.0)*new_r02);
IkReal x371=((1.0)*new_r12);
IkReal x372=((1.0)*x368);
evalcond[0]=(x369+new_r21);
evalcond[1]=((((-1.0)*x372))+new_r20);
evalcond[2]=(new_r11+((new_r02*x368)));
evalcond[3]=(new_r10+((new_r02*x369)));
evalcond[4]=((((-1.0)*x368*x371))+new_r01);
evalcond[5]=((((-1.0)*x369*x371))+new_r00);
evalcond[6]=((((-1.0)*x369))+((new_r00*new_r12))+(((-1.0)*new_r10*x370)));
evalcond[7]=((((-1.0)*x372))+((new_r01*new_r12))+(((-1.0)*new_r11*x370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x373=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x374=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x373;
evalcond[7]=x373;
evalcond[8]=x374;
evalcond[9]=x374;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x375=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x375))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x375))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x375))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x375))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x376=IKsin(j6);
IkReal x377=IKcos(j6);
IkReal x378=((1.0)*sj4);
IkReal x379=((1.0)*x377);
IkReal x380=(sj4*x376);
IkReal x381=(sj4*x377);
IkReal x382=(cj4*x376);
IkReal x383=(cj4*x379);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x376);
evalcond[1]=(x382+x381+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x379)));
evalcond[3]=((((-1.0)*new_r00*x378))+(((-1.0)*x376))+((cj4*new_r10)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x379))+(((-1.0)*new_r01*x378)));
evalcond[5]=(x380+(((-1.0)*x383))+new_r00);
evalcond[6]=(x380+(((-1.0)*x383))+new_r11);
evalcond[7]=((((-1.0)*x377*x378))+(((-1.0)*x382))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x384=(cj4*new_r02);
IkReal x385=(new_r12*sj4);
IkReal x386=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x386;
evalcond[7]=x386;
evalcond[8]=(x384+x385);
evalcond[9]=((((-1.0)*x385))+(((-1.0)*x384)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x387=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x387))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x387))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x387))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x387))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x388=IKcos(j6);
IkReal x389=IKsin(j6);
IkReal x390=((1.0)*sj4);
IkReal x391=((1.0)*x389);
IkReal x392=(sj4*x388);
IkReal x393=((1.0)*x388);
IkReal x394=(cj4*x391);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x388);
evalcond[1]=((((-1.0)*x391))+((cj4*new_r01))+((new_r11*sj4)));
evalcond[2]=(((sj4*x389))+new_r00+((cj4*x388)));
evalcond[3]=((((-1.0)*x391))+((cj4*new_r10))+(((-1.0)*new_r00*x390)));
evalcond[4]=((((-1.0)*new_r01*x390))+(((-1.0)*x393))+((cj4*new_r11)));
evalcond[5]=((((-1.0)*x394))+x392+new_r01);
evalcond[6]=((((-1.0)*x394))+x392+new_r10);
evalcond[7]=((((-1.0)*cj4*x393))+(((-1.0)*x389*x390))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x395=(new_r22+(((-1.0)*cj5)));
IkReal x396=((((-1.0)*sj5))+new_r02);
IkReal x397=((1.0)*cj5);
IkReal x398=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x395;
evalcond[2]=x395;
evalcond[3]=x396;
evalcond[4]=new_r12;
evalcond[5]=x396;
evalcond[6]=((((-1.0)*new_r22*x398))+((cj5*new_r02)));
evalcond[7]=((((-1.0)*new_r00*x398))+(((-1.0)*new_r20*x397)));
evalcond[8]=((((-1.0)*new_r01*x398))+(((-1.0)*new_r21*x397)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x397))+(((-1.0)*new_r02*x398)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x399=IKcos(j6);
IkReal x400=IKsin(j6);
IkReal x401=((1.0)*new_r02);
IkReal x402=((1.0)*x399);
evalcond[0]=(new_r20+((new_r02*x399)));
evalcond[1]=(new_r10+(((-1.0)*x400)));
evalcond[2]=(new_r11+(((-1.0)*x402)));
evalcond[3]=(((new_r22*x400))+new_r01);
evalcond[4]=((((-1.0)*x400*x401))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x402)));
evalcond[6]=(((new_r01*new_r22))+x400+(((-1.0)*new_r21*x401)));
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x401))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x403=(new_r22+(((-1.0)*cj5)));
IkReal x404=((1.0)*cj5);
IkReal x405=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x403;
evalcond[2]=x403;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*new_r02))+(((-1.0)*x405)));
evalcond[6]=((((-1.0)*new_r02*x404))+(((-1.0)*new_r22*x405)));
evalcond[7]=(((new_r00*sj5))+(((-1.0)*new_r20*x404)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x404)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x404)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x406=(sj2*sj3);
IkReal x407=(cj3*sj1);
IkReal x408=(cj3*sj2);
IkReal x409=(cj1*cj3);
IkReal x410=(sj1*sj3);
IkReal x411=((1.0)*sj2);
IkReal x412=(cj1*sj3);
IkReal x413=(x412+((cj2*x407)));
IkReal x414=x106;
IkReal x415=x107;
IkReal x416=(x407+((cj2*x412)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r00=(((r00*x414))+((r10*x413))+((r20*x408)));
new_r01=(((r11*x413))+((r01*x414))+((r21*x408)));
new_r02=(((r12*x413))+((r22*x408))+((r02*x414)));
new_r10=((((-1.0)*cj1*r00*x411))+(((-1.0)*r10*sj1*x411))+((cj2*r20)));
new_r11=((((-1.0)*cj1*r01*x411))+((cj2*r21))+(((-1.0)*r11*sj1*x411)));
new_r12=(((cj2*r22))+(((-1.0)*r12*sj1*x411))+(((-1.0)*cj1*r02*x411)));
new_r20=(((r00*x416))+((r10*x415))+((r20*x406)));
new_r21=(((r11*x415))+((r01*x416))+((r21*x406)));
new_r22=(((r12*x415))+((r22*x406))+((r02*x416)));
IkReal x417=((1.0)*sj1);
IkReal x418=(cj1*cj3);
IkReal x419=(sj2*sj3);
IkReal x420=(cj2*sj3);
j6eval[0]=((IKabs(((((-1.0)*r10*x418))+((cj1*r00*x420))+((cj3*r00*sj1))+((r20*x419))+((r10*sj1*x420)))))+(IKabs(((((-1.0)*cj1*r01*x420))+((r11*x418))+(((-1.0)*r21*x419))+(((-1.0)*cj3*r01*x417))+(((-1.0)*r11*x417*x420))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x421=IKPowWithIntegerCheck(new_r02,-1);
if(!x421.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x421.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x421.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x422=IKsin(j6);
IkReal x423=IKcos(j6);
IkReal x424=((1.0)*new_r01);
IkReal x425=((1.0)*new_r00);
IkReal x426=((1.0)*x423);
evalcond[0]=(new_r21+((new_r02*x422)));
evalcond[1]=((((-1.0)*new_r02*x426))+new_r20);
evalcond[2]=((((-1.0)*x422))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x426))+(((-1.0)*new_r11)));
evalcond[4]=(((new_r22*x422))+(((-1.0)*x424)));
evalcond[5]=((((-1.0)*new_r22*x426))+(((-1.0)*x425)));
evalcond[6]=((((-1.0)*new_r22*x424))+x422+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x425))+(((-1.0)*x426))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x427 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x427.valid){
continue;
}
CheckValue<IkReal> x428=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x428.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x427.value)+(((1.5707963267949)*(x428.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x429=IKsin(j6);
IkReal x430=IKcos(j6);
IkReal x431=((1.0)*new_r01);
IkReal x432=((1.0)*new_r00);
IkReal x433=((1.0)*x430);
evalcond[0]=(new_r21+((new_r02*x429)));
evalcond[1]=((((-1.0)*new_r02*x433))+new_r20);
evalcond[2]=((((-1.0)*x429))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x433))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x431))+((new_r22*x429)));
evalcond[5]=((((-1.0)*x432))+(((-1.0)*new_r22*x433)));
evalcond[6]=(x429+((new_r02*new_r21))+(((-1.0)*new_r22*x431)));
evalcond[7]=((((-1.0)*x433))+((new_r02*new_r20))+(((-1.0)*new_r22*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x435=IKPowWithIntegerCheck(sj5,-1);
if(!x435.valid){
continue;
}
IkReal x434=x435.value;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(cj4,-1);
if(!x436.valid){
continue;
}
CheckValue<IkReal> x437=IKPowWithIntegerCheck(cj5,-1);
if(!x437.valid){
continue;
}
if( IKabs((x434*(x436.value)*(x437.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x434)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x434*(x436.value)*(x437.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x434))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x434*(x436.value)*(x437.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x434));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x438=IKsin(j6);
IkReal x439=IKcos(j6);
IkReal x440=((1.0)*sj5);
IkReal x441=((1.0)*sj4);
IkReal x442=(cj5*sj4);
IkReal x443=(cj4*new_r01);
IkReal x444=(cj4*new_r00);
IkReal x445=((1.0)*x439);
IkReal x446=(cj5*x438);
IkReal x447=((1.0)*x438);
evalcond[0]=(new_r20+((sj5*x439)));
evalcond[1]=((((-1.0)*x438*x440))+new_r21);
evalcond[2]=(((new_r11*sj4))+x446+x443);
evalcond[3]=((((-1.0)*x447))+(((-1.0)*new_r00*x441))+((cj4*new_r10)));
evalcond[4]=((((-1.0)*x445))+(((-1.0)*new_r01*x441))+((cj4*new_r11)));
evalcond[5]=(((sj4*x439))+((cj4*x446))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x445))+x444);
evalcond[7]=(((sj4*x438))+(((-1.0)*cj4*cj5*x445))+new_r00);
evalcond[8]=((((-1.0)*cj4*x445))+((x438*x442))+new_r11);
evalcond[9]=((((-1.0)*cj5*x439*x441))+(((-1.0)*cj4*x447))+new_r10);
evalcond[10]=(((cj5*x443))+((new_r11*x442))+x438+(((-1.0)*new_r21*x440)));
evalcond[11]=((((-1.0)*x445))+((cj5*x444))+((new_r10*x442))+(((-1.0)*new_r20*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(sj5,-1);
if(!x449.valid){
continue;
}
IkReal x448=x449.value;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(sj4,-1);
if(!x450.valid){
continue;
}
if( IKabs((x448*(x450.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x448)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x448*(x450.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x448))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x448*(x450.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x448));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x451=IKsin(j6);
IkReal x452=IKcos(j6);
IkReal x453=((1.0)*sj5);
IkReal x454=((1.0)*sj4);
IkReal x455=(cj5*sj4);
IkReal x456=(cj4*new_r01);
IkReal x457=(cj4*new_r00);
IkReal x458=((1.0)*x452);
IkReal x459=(cj5*x451);
IkReal x460=((1.0)*x451);
evalcond[0]=(new_r20+((sj5*x452)));
evalcond[1]=((((-1.0)*x451*x453))+new_r21);
evalcond[2]=(((new_r11*sj4))+x459+x456);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x460))+(((-1.0)*new_r00*x454)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x454))+(((-1.0)*x458)));
evalcond[5]=(((cj4*x459))+((sj4*x452))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x458))+x457);
evalcond[7]=((((-1.0)*cj4*cj5*x458))+((sj4*x451))+new_r00);
evalcond[8]=((((-1.0)*cj4*x458))+new_r11+((x451*x455)));
evalcond[9]=((((-1.0)*cj4*x460))+new_r10+(((-1.0)*cj5*x452*x454)));
evalcond[10]=((((-1.0)*new_r21*x453))+((cj5*x456))+((new_r11*x455))+x451);
evalcond[11]=(((cj5*x457))+((new_r10*x455))+(((-1.0)*new_r20*x453))+(((-1.0)*x458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x461=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x462.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x461.value)))+(x462.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x463=IKsin(j6);
IkReal x464=IKcos(j6);
IkReal x465=((1.0)*sj5);
IkReal x466=((1.0)*sj4);
IkReal x467=(cj5*sj4);
IkReal x468=(cj4*new_r01);
IkReal x469=(cj4*new_r00);
IkReal x470=((1.0)*x464);
IkReal x471=(cj5*x463);
IkReal x472=((1.0)*x463);
evalcond[0]=(new_r20+((sj5*x464)));
evalcond[1]=((((-1.0)*x463*x465))+new_r21);
evalcond[2]=(((new_r11*sj4))+x468+x471);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x472))+(((-1.0)*new_r00*x466)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x470))+(((-1.0)*new_r01*x466)));
evalcond[5]=(((cj4*x471))+((sj4*x464))+new_r01);
evalcond[6]=((((-1.0)*cj5*x470))+((new_r10*sj4))+x469);
evalcond[7]=((((-1.0)*cj4*cj5*x470))+((sj4*x463))+new_r00);
evalcond[8]=((((-1.0)*cj4*x470))+((x463*x467))+new_r11);
evalcond[9]=((((-1.0)*cj4*x472))+new_r10+(((-1.0)*cj5*x464*x466)));
evalcond[10]=((((-1.0)*new_r21*x465))+((new_r11*x467))+((cj5*x468))+x463);
evalcond[11]=(((cj5*x469))+((new_r10*x467))+(((-1.0)*new_r20*x465))+(((-1.0)*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x473=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x473.valid){
continue;
}
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x473.value)))+(x474.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj5*(IKcos(j6)))));
evalcond[1]=((((-1.0)*sj5*(IKsin(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x475=(sj2*sj3);
IkReal x476=(cj3*sj1);
IkReal x477=(cj3*sj2);
IkReal x478=(cj1*cj3);
IkReal x479=(sj1*sj3);
IkReal x480=((1.0)*sj2);
IkReal x481=(cj1*sj3);
IkReal x482=(((cj2*x476))+x481);
IkReal x483=x106;
IkReal x484=x107;
IkReal x485=(((cj2*x481))+x476);
new_r00=(((r20*x477))+((r10*x482))+((r00*x483)));
new_r01=(((r21*x477))+((r11*x482))+((r01*x483)));
new_r02=(((r02*x483))+((r12*x482))+((r22*x477)));
new_r10=((((-1.0)*r10*sj1*x480))+(((-1.0)*cj1*r00*x480))+((cj2*r20)));
new_r11=((((-1.0)*r11*sj1*x480))+((cj2*r21))+(((-1.0)*cj1*r01*x480)));
new_r12=((((-1.0)*cj1*r02*x480))+(((-1.0)*r12*sj1*x480))+((cj2*r22)));
new_r20=(((r20*x475))+((r10*x484))+((r00*x485)));
new_r21=(((r21*x475))+((r11*x484))+((r01*x485)));
new_r22=(((r02*x485))+((r12*x484))+((r22*x475)));
IkReal x486=((1.0)*sj1);
IkReal x487=(cj1*r02);
IkReal x488=(cj2*cj3);
j4eval[0]=sj5;
j4eval[1]=((IKabs(((((-1.0)*sj2*x487))+((cj2*r22))+(((-1.0)*r12*sj2*x486)))))+(IKabs((((cj3*r22*sj2))+((cj1*r12*sj3))+((r12*sj1*x488))+(((-1.0)*r02*sj3*x486))+((x487*x488))))));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x489=(sj2*sj3);
IkReal x490=(cj3*sj1);
IkReal x491=(cj3*sj2);
IkReal x492=(cj1*cj3);
IkReal x493=(sj1*sj3);
IkReal x494=((1.0)*sj2);
IkReal x495=(cj1*sj3);
IkReal x496=(x495+((cj2*x490)));
IkReal x497=x106;
IkReal x498=x107;
IkReal x499=(x490+((cj2*x495)));
new_r00=(((r10*x496))+((r00*x497))+((r20*x491)));
new_r01=(((r11*x496))+((r21*x491))+((r01*x497)));
new_r02=(((r02*x497))+((r22*x491))+((r12*x496)));
new_r10=((((-1.0)*cj1*r00*x494))+((cj2*r20))+(((-1.0)*r10*sj1*x494)));
new_r11=((((-1.0)*cj1*r01*x494))+(((-1.0)*r11*sj1*x494))+((cj2*r21)));
new_r12=((((-1.0)*r12*sj1*x494))+(((-1.0)*cj1*r02*x494))+((cj2*r22)));
new_r20=(((r20*x489))+((r10*x498))+((r00*x499)));
new_r21=(((r11*x498))+((r21*x489))+((r01*x499)));
new_r22=(((r02*x499))+((r12*x498))+((r22*x489)));
j4eval[0]=cj6;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
IkReal x500=(new_r22+(((-1.0)*cj5)));
IkReal x501=((((-1.0)*sj5))+new_r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=x500;
evalcond[2]=x500;
evalcond[3]=new_r20;
evalcond[4]=x501;
evalcond[5]=x501;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x502=IKsin(j4);
IkReal x503=IKcos(j4);
IkReal x504=((1.0)*new_r21);
IkReal x505=(new_r22*x504);
IkReal x506=(new_r10*x502);
IkReal x507=(new_r22*x502);
IkReal x508=(new_r11*x502);
IkReal x509=(new_r02*x503);
IkReal x510=(new_r01*x503);
IkReal x511=(new_r00*x503);
IkReal x512=(new_r12*x502);
IkReal x513=((1.0)*x502);
evalcond[0]=(x502+new_r00);
evalcond[1]=(((new_r22*x503))+new_r01);
evalcond[2]=(x507+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x503)));
evalcond[4]=((((-1.0)*x503*x504))+new_r02);
evalcond[5]=((((-1.0)*x502*x504))+new_r12);
evalcond[6]=(x506+x511);
evalcond[7]=(((new_r12*x503))+(((-1.0)*new_r02*x513)));
evalcond[8]=(((new_r11*x503))+(((-1.0)*new_r01*x513)));
evalcond[9]=(x508+x510+new_r22);
evalcond[10]=((-1.0)+((new_r10*x503))+(((-1.0)*new_r00*x513)));
evalcond[11]=((((-1.0)*x504))+x509+x512);
evalcond[12]=(((new_r22*x509))+(((-1.0)*x505))+((new_r12*x507)));
evalcond[13]=(((new_r22*x506))+(((-1.0)*new_r20*x504))+((new_r22*x511)));
evalcond[14]=((((-1.0)*new_r20*new_r22))+(((-1.0)*x504*x511))+(((-1.0)*x504*x506)));
evalcond[15]=((((-1.0)*x505))+(((-1.0)*x504*x510))+(((-1.0)*x504*x508)));
evalcond[16]=((1.0)+(((-1.0)*new_r21*x504))+((new_r11*x507))+((new_r22*x510)));
evalcond[17]=((1.0)+(((-1.0)*x504*x512))+(((-1.0)*x504*x509))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x514=(new_r22+(((-1.0)*cj5)));
IkReal x515=(sj5+new_r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=x514;
evalcond[2]=x514;
evalcond[3]=new_r20;
evalcond[4]=x515;
evalcond[5]=x515;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x516=IKcos(j4);
IkReal x517=IKsin(j4);
IkReal x518=((1.0)*new_r22);
IkReal x519=(new_r22*x516);
IkReal x520=(new_r22*x517);
IkReal x521=(new_r11*x517);
IkReal x522=(new_r21*x517);
IkReal x523=(new_r02*x516);
IkReal x524=((1.0)*x517);
IkReal x525=(new_r21*x516);
evalcond[0]=(x516+new_r10);
evalcond[1]=(x525+new_r02);
evalcond[2]=(x522+new_r12);
evalcond[3]=((((-1.0)*x524))+new_r00);
evalcond[4]=((((-1.0)*x516*x518))+new_r01);
evalcond[5]=((((-1.0)*x517*x518))+new_r11);
evalcond[6]=(((new_r00*x516))+((new_r10*x517)));
evalcond[7]=(((new_r12*x516))+(((-1.0)*new_r02*x524)));
evalcond[8]=(((new_r12*x517))+x523+new_r21);
evalcond[9]=(((new_r11*x516))+(((-1.0)*new_r01*x524)));
evalcond[10]=((1.0)+((new_r10*x516))+(((-1.0)*new_r00*x524)));
evalcond[11]=(((new_r01*x516))+x521+(((-1.0)*x518)));
evalcond[12]=(((new_r02*x519))+((new_r12*x520))+((new_r21*new_r22)));
evalcond[13]=(((new_r00*x519))+((new_r20*new_r21))+((new_r10*x520)));
evalcond[14]=(((new_r10*x522))+(((-1.0)*new_r20*x518))+((new_r00*x525)));
evalcond[15]=(((new_r01*x525))+(((-1.0)*new_r21*x518))+((new_r21*x521)));
evalcond[16]=((-1.0)+((new_r01*x519))+((new_r11*x520))+(new_r21*new_r21));
evalcond[17]=((1.0)+((new_r12*x522))+(((-1.0)*new_r22*x518))+((new_r21*x523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x526=(sj2*sj3);
IkReal x527=(cj3*sj1);
IkReal x528=(cj3*sj2);
IkReal x529=(cj1*cj3);
IkReal x530=(sj1*sj3);
IkReal x531=((1.0)*sj2);
IkReal x532=(cj1*sj3);
IkReal x533=(x532+((cj2*x527)));
IkReal x534=x106;
IkReal x535=x107;
IkReal x536=(x527+((cj2*x532)));
sj5=0;
cj5=1.0;
j5=0;
new_r00=(((r20*x528))+((r10*x533))+((r00*x534)));
new_r01=(((r21*x528))+((r11*x533))+((r01*x534)));
new_r02=(((r02*x534))+((r12*x533))+((r22*x528)));
new_r10=(((cj2*r20))+(((-1.0)*cj1*r00*x531))+(((-1.0)*r10*sj1*x531)));
new_r11=((((-1.0)*r11*sj1*x531))+((cj2*r21))+(((-1.0)*cj1*r01*x531)));
new_r12=((((-1.0)*r12*sj1*x531))+((cj2*r22))+(((-1.0)*cj1*r02*x531)));
new_r20=(((r20*x526))+((r10*x535))+((r00*x536)));
new_r21=(((r21*x526))+((r11*x535))+((r01*x536)));
new_r22=(((r02*x536))+((r12*x535))+((r22*x526)));
IkReal x537=(r12*sj6);
IkReal x538=((1.0)*sj2);
IkReal x539=(cj2*sj6);
IkReal x540=(cj1*r02);
j4eval[0]=((IKabs(((((-1.0)*sj1*x537*x538))+(((-1.0)*sj6*x538*x540))+((r22*x539)))))+(IKabs(((((-1.0)*r02*sj1*sj3*sj6))+((cj1*sj3*x537))+((cj3*x539*x540))+((cj3*r22*sj2*sj6))+((cj2*cj3*sj1*x537))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal((new_r01*new_r02)),((-1.0)*new_r01*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
CheckValue<IkReal> x542=IKPowWithIntegerCheck(IKsign((((new_r12*sj6))+(((-1.0)*cj6*new_r02)))),-1);
if(!x542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x541.value)+(((1.5707963267949)*(x542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x543=IKcos(j4);
IkReal x544=IKsin(j4);
IkReal x545=((1.0)*cj6);
IkReal x546=(sj6*x544);
IkReal x547=((1.0)*x543);
IkReal x548=(cj6*x544);
IkReal x549=((1.0)*x544);
IkReal x550=(x543*x545);
evalcond[0]=(((new_r02*x543))+((new_r12*x544)));
evalcond[1]=(((new_r12*x543))+(((-1.0)*new_r02*x549)));
evalcond[2]=(sj6+((new_r11*x544))+((new_r01*x543)));
evalcond[3]=(x548+((sj6*x543))+new_r01);
evalcond[4]=((((-1.0)*x550))+x546+new_r00);
evalcond[5]=((((-1.0)*x550))+x546+new_r11);
evalcond[6]=(((new_r00*x543))+((new_r10*x544))+(((-1.0)*x545)));
evalcond[7]=((((-1.0)*x544*x545))+(((-1.0)*sj6*x547))+new_r10);
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x549))+((new_r10*x543)));
evalcond[9]=(((new_r11*x543))+(((-1.0)*new_r01*x549))+(((-1.0)*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x551=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*new_r11)))),-1);
if(!x551.valid){
continue;
}
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal((new_r02*sj6)),((-1.0)*new_r12*sj6),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x551.value)))+(x552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x553=IKcos(j4);
IkReal x554=IKsin(j4);
IkReal x555=((1.0)*cj6);
IkReal x556=(sj6*x554);
IkReal x557=((1.0)*x553);
IkReal x558=(cj6*x554);
IkReal x559=((1.0)*x554);
IkReal x560=(x553*x555);
evalcond[0]=(((new_r02*x553))+((new_r12*x554)));
evalcond[1]=(((new_r12*x553))+(((-1.0)*new_r02*x559)));
evalcond[2]=(sj6+((new_r11*x554))+((new_r01*x553)));
evalcond[3]=(x558+((sj6*x553))+new_r01);
evalcond[4]=(x556+new_r00+(((-1.0)*x560)));
evalcond[5]=(x556+new_r11+(((-1.0)*x560)));
evalcond[6]=(((new_r10*x554))+(((-1.0)*x555))+((new_r00*x553)));
evalcond[7]=((((-1.0)*x554*x555))+(((-1.0)*sj6*x557))+new_r10);
evalcond[8]=((((-1.0)*sj6))+((new_r10*x553))+(((-1.0)*new_r00*x559)));
evalcond[9]=(((new_r11*x553))+(((-1.0)*new_r01*x559))+(((-1.0)*x555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x561=(sj2*sj3);
IkReal x562=(cj3*sj1);
IkReal x563=(cj3*sj2);
IkReal x564=(cj1*cj3);
IkReal x565=(sj1*sj3);
IkReal x566=((1.0)*sj2);
IkReal x567=(cj1*sj3);
IkReal x568=(((cj2*x562))+x567);
IkReal x569=x106;
IkReal x570=x107;
IkReal x571=(((cj2*x567))+x562);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
new_r00=(((r00*x569))+((r20*x563))+((r10*x568)));
new_r01=(((r01*x569))+((r21*x563))+((r11*x568)));
new_r02=(((r22*x563))+((r12*x568))+((r02*x569)));
new_r10=((((-1.0)*r10*sj1*x566))+(((-1.0)*cj1*r00*x566))+((cj2*r20)));
new_r11=((((-1.0)*r11*sj1*x566))+((cj2*r21))+(((-1.0)*cj1*r01*x566)));
new_r12=((((-1.0)*r12*sj1*x566))+((cj2*r22))+(((-1.0)*cj1*r02*x566)));
new_r20=(((r00*x571))+((r20*x561))+((r10*x570)));
new_r21=(((r01*x571))+((r21*x561))+((r11*x570)));
new_r22=(((r12*x570))+((r22*x561))+((r02*x571)));
IkReal x572=(cj6*r12);
IkReal x573=(cj2*cj3);
IkReal x574=(cj6*r02);
IkReal x575=((1.0)*sj1);
IkReal x576=(cj6*r22);
j4eval[0]=((IKabs(((((-1.0)*cj1*sj2*x574))+(((-1.0)*sj2*x572*x575))+((cj2*x576)))))+(IKabs((((sj1*x572*x573))+(((-1.0)*sj3*x574*x575))+((cj1*sj3*x572))+((cj1*x573*x574))+((cj3*sj2*x576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x577=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r02*sj6))+((cj6*new_r12)))),-1);
if(!x577.valid){
continue;
}
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal((new_r00*new_r02)),((-1.0)*new_r00*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x577.value)))+(x578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x579=IKcos(j4);
IkReal x580=IKsin(j4);
IkReal x581=((1.0)*sj6);
IkReal x582=(cj6*x580);
IkReal x583=(cj6*x579);
IkReal x584=((1.0)*x580);
IkReal x585=(x579*x581);
evalcond[0]=(((new_r12*x580))+((new_r02*x579)));
evalcond[1]=(((new_r12*x579))+(((-1.0)*new_r02*x584)));
evalcond[2]=(((new_r00*x579))+cj6+((new_r10*x580)));
evalcond[3]=(x583+new_r00+((sj6*x580)));
evalcond[4]=(x582+new_r01+(((-1.0)*x585)));
evalcond[5]=(x582+new_r10+(((-1.0)*x585)));
evalcond[6]=(((new_r01*x579))+(((-1.0)*x581))+((new_r11*x580)));
evalcond[7]=((((-1.0)*x580*x581))+(((-1.0)*x583))+new_r11);
evalcond[8]=(((new_r10*x579))+(((-1.0)*x581))+(((-1.0)*new_r00*x584)));
evalcond[9]=((((-1.0)*new_r01*x584))+((new_r11*x579))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x586=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x586.valid){
continue;
}
CheckValue<IkReal> x587 = IKatan2WithCheck(IkReal((cj6*new_r02)),((-1.0)*cj6*new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x586.value)))+(x587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x588=IKcos(j4);
IkReal x589=IKsin(j4);
IkReal x590=((1.0)*sj6);
IkReal x591=(cj6*x589);
IkReal x592=(cj6*x588);
IkReal x593=((1.0)*x589);
IkReal x594=(x588*x590);
evalcond[0]=(((new_r12*x589))+((new_r02*x588)));
evalcond[1]=((((-1.0)*new_r02*x593))+((new_r12*x588)));
evalcond[2]=(cj6+((new_r00*x588))+((new_r10*x589)));
evalcond[3]=(x592+new_r00+((sj6*x589)));
evalcond[4]=((((-1.0)*x594))+x591+new_r01);
evalcond[5]=((((-1.0)*x594))+x591+new_r10);
evalcond[6]=((((-1.0)*x590))+((new_r01*x588))+((new_r11*x589)));
evalcond[7]=((((-1.0)*x589*x590))+(((-1.0)*x592))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x593))+(((-1.0)*x590))+((new_r10*x588)));
evalcond[9]=((((-1.0)*new_r01*x593))+((new_r11*x588))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x596=IKPowWithIntegerCheck(sj5,-1);
if(!x596.valid){
continue;
}
IkReal x595=x596.value;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(cj6,-1);
if(!x597.valid){
continue;
}
if( IKabs((x595*(x597.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x595)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x595*(x597.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))))+IKsqr((new_r02*x595))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x595*(x597.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))), (new_r02*x595));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x598=IKcos(j4);
IkReal x599=IKsin(j4);
IkReal x600=((1.0)*cj6);
IkReal x601=(cj5*sj6);
IkReal x602=((1.0)*cj5);
IkReal x603=((1.0)*sj5);
IkReal x604=((1.0)*x598);
IkReal x605=(cj5*x599);
IkReal x606=(new_r11*x599);
IkReal x607=(cj5*x598);
IkReal x608=(new_r12*x599);
IkReal x609=(new_r10*x599);
IkReal x610=((1.0)*x599);
evalcond[0]=((((-1.0)*x598*x603))+new_r02);
evalcond[1]=((((-1.0)*x599*x603))+new_r12);
evalcond[2]=(((new_r12*x598))+(((-1.0)*new_r02*x610)));
evalcond[3]=(((cj6*x599))+new_r01+((x598*x601)));
evalcond[4]=(((new_r02*x598))+x608+(((-1.0)*x603)));
evalcond[5]=(((new_r01*x598))+x601+x606);
evalcond[6]=(((sj6*x599))+(((-1.0)*x600*x607))+new_r00);
evalcond[7]=((((-1.0)*x598*x600))+((x599*x601))+new_r11);
evalcond[8]=((((-1.0)*sj6))+((new_r10*x598))+(((-1.0)*new_r00*x610)));
evalcond[9]=(((new_r11*x598))+(((-1.0)*x600))+(((-1.0)*new_r01*x610)));
evalcond[10]=(((new_r00*x598))+x609+(((-1.0)*cj5*x600)));
evalcond[11]=((((-1.0)*sj6*x604))+(((-1.0)*x600*x605))+new_r10);
evalcond[12]=((((-1.0)*new_r22*x603))+((new_r12*x605))+((new_r02*x607)));
evalcond[13]=(sj6+((new_r11*x605))+((new_r01*x607))+(((-1.0)*new_r21*x603)));
evalcond[14]=((((-1.0)*new_r20*x602))+(((-1.0)*x603*x609))+(((-1.0)*new_r00*x598*x603)));
evalcond[15]=((((-1.0)*x603*x606))+(((-1.0)*new_r01*x598*x603))+(((-1.0)*new_r21*x602)));
evalcond[16]=((1.0)+(((-1.0)*new_r22*x602))+(((-1.0)*x603*x608))+(((-1.0)*new_r02*x598*x603)));
evalcond[17]=((((-1.0)*new_r20*x603))+((new_r10*x605))+((new_r00*x607))+(((-1.0)*x600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x611.value)))+(x612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x613=IKcos(j4);
IkReal x614=IKsin(j4);
IkReal x615=((1.0)*cj6);
IkReal x616=(cj5*sj6);
IkReal x617=((1.0)*cj5);
IkReal x618=((1.0)*sj5);
IkReal x619=((1.0)*x613);
IkReal x620=(cj5*x614);
IkReal x621=(new_r11*x614);
IkReal x622=(cj5*x613);
IkReal x623=(new_r12*x614);
IkReal x624=(new_r10*x614);
IkReal x625=((1.0)*x614);
evalcond[0]=((((-1.0)*x613*x618))+new_r02);
evalcond[1]=((((-1.0)*x614*x618))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x625))+((new_r12*x613)));
evalcond[3]=(((cj6*x614))+((x613*x616))+new_r01);
evalcond[4]=(((new_r02*x613))+(((-1.0)*x618))+x623);
evalcond[5]=(x616+x621+((new_r01*x613)));
evalcond[6]=(new_r00+(((-1.0)*x615*x622))+((sj6*x614)));
evalcond[7]=(((x614*x616))+(((-1.0)*x613*x615))+new_r11);
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x625))+((new_r10*x613)));
evalcond[9]=((((-1.0)*new_r01*x625))+((new_r11*x613))+(((-1.0)*x615)));
evalcond[10]=((((-1.0)*cj5*x615))+x624+((new_r00*x613)));
evalcond[11]=((((-1.0)*sj6*x619))+new_r10+(((-1.0)*x615*x620)));
evalcond[12]=(((new_r02*x622))+((new_r12*x620))+(((-1.0)*new_r22*x618)));
evalcond[13]=(sj6+(((-1.0)*new_r21*x618))+((new_r01*x622))+((new_r11*x620)));
evalcond[14]=((((-1.0)*new_r00*x613*x618))+(((-1.0)*x618*x624))+(((-1.0)*new_r20*x617)));
evalcond[15]=((((-1.0)*new_r01*x613*x618))+(((-1.0)*new_r21*x617))+(((-1.0)*x618*x621)));
evalcond[16]=((1.0)+(((-1.0)*x618*x623))+(((-1.0)*new_r02*x613*x618))+(((-1.0)*new_r22*x617)));
evalcond[17]=(((new_r00*x622))+(((-1.0)*x615))+((new_r10*x620))+(((-1.0)*new_r20*x618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x626=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x626.value)))+(x627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x628=IKcos(j4);
IkReal x629=IKsin(j4);
IkReal x630=((1.0)*sj5);
IkReal x631=((1.0)*cj5);
IkReal x632=(new_r12*x629);
IkReal x633=(new_r02*x628);
evalcond[0]=((((-1.0)*x628*x630))+new_r02);
evalcond[1]=((((-1.0)*x629*x630))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x629))+((new_r12*x628)));
evalcond[3]=((((-1.0)*x630))+x632+x633);
evalcond[4]=(((cj5*x633))+((cj5*x632))+(((-1.0)*new_r22*x630)));
evalcond[5]=((((-1.0)*new_r10*x629*x630))+(((-1.0)*new_r00*x628*x630))+(((-1.0)*new_r20*x631)));
evalcond[6]=((((-1.0)*new_r21*x631))+(((-1.0)*new_r01*x628*x630))+(((-1.0)*new_r11*x629*x630)));
evalcond[7]=((1.0)+(((-1.0)*x630*x632))+(((-1.0)*x630*x633))+(((-1.0)*new_r22*x631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
IkReal x634=(sj2*sj3);
IkReal x635=(cj3*sj1);
IkReal x636=(cj3*sj2);
IkReal x637=(cj1*cj3);
IkReal x638=(sj1*sj3);
IkReal x639=((1.0)*sj2);
IkReal x640=(cj1*sj3);
IkReal x641=(x640+((cj2*x635)));
IkReal x642=x106;
IkReal x643=x107;
IkReal x644=(((cj2*x640))+x635);
new_r00=(((r10*x641))+((r00*x642))+((r20*x636)));
new_r01=(((r21*x636))+((r01*x642))+((r11*x641)));
new_r02=(((r22*x636))+((r02*x642))+((r12*x641)));
new_r10=((((-1.0)*cj1*r00*x639))+((cj2*r20))+(((-1.0)*r10*sj1*x639)));
new_r11=((((-1.0)*r11*sj1*x639))+((cj2*r21))+(((-1.0)*cj1*r01*x639)));
new_r12=((((-1.0)*cj1*r02*x639))+((cj2*r22))+(((-1.0)*r12*sj1*x639)));
new_r20=(((r10*x643))+((r00*x644))+((r20*x634)));
new_r21=(((r21*x634))+((r01*x644))+((r11*x643)));
new_r22=(((r22*x634))+((r02*x644))+((r12*x643)));
IkReal x645=(cj3*sj1);
IkReal x646=((1.0)*r00);
IkReal x647=(sj2*sj3);
IkReal x648=(cj1*cj3);
IkReal x649=(cj2*sj1*sj3);
IkReal x650=(cj1*cj2*sj3);
j6eval[0]=sj5;
j6eval[1]=((IKabs(((((-1.0)*r10*x649))+(((-1.0)*x646*x650))+(((-1.0)*r20*x647))+((r10*x648))+(((-1.0)*x645*x646)))))+(IKabs((((r21*x647))+((r01*x645))+((r11*x649))+(((-1.0)*r11*x648))+((r01*x650))))));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x651=(sj2*sj3);
IkReal x652=(cj3*sj1);
IkReal x653=(cj3*sj2);
IkReal x654=(cj1*cj3);
IkReal x655=(sj1*sj3);
IkReal x656=((1.0)*sj2);
IkReal x657=(cj1*sj3);
IkReal x658=(((cj2*x652))+x657);
IkReal x659=x106;
IkReal x660=x107;
IkReal x661=(((cj2*x657))+x652);
new_r00=(((r10*x658))+((r00*x659))+((r20*x653)));
new_r01=(((r11*x658))+((r21*x653))+((r01*x659)));
new_r02=(((r02*x659))+((r22*x653))+((r12*x658)));
new_r10=(((cj2*r20))+(((-1.0)*r10*sj1*x656))+(((-1.0)*cj1*r00*x656)));
new_r11=((((-1.0)*r11*sj1*x656))+((cj2*r21))+(((-1.0)*cj1*r01*x656)));
new_r12=((((-1.0)*cj1*r02*x656))+(((-1.0)*r12*sj1*x656))+((cj2*r22)));
new_r20=(((r00*x661))+((r10*x660))+((r20*x651)));
new_r21=(((r01*x661))+((r11*x660))+((r21*x651)));
new_r22=(((r22*x651))+((r12*x660))+((r02*x661)));
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x662=(sj2*sj3);
IkReal x663=(cj3*sj1);
IkReal x664=(cj3*sj2);
IkReal x665=(cj1*cj3);
IkReal x666=(sj1*sj3);
IkReal x667=((1.0)*sj2);
IkReal x668=(cj1*sj3);
IkReal x669=(((cj2*x663))+x668);
IkReal x670=x106;
IkReal x671=x107;
IkReal x672=(((cj2*x668))+x663);
new_r00=(((r20*x664))+((r00*x670))+((r10*x669)));
new_r01=(((r01*x670))+((r11*x669))+((r21*x664)));
new_r02=(((r02*x670))+((r12*x669))+((r22*x664)));
new_r10=(((cj2*r20))+(((-1.0)*r10*sj1*x667))+(((-1.0)*cj1*r00*x667)));
new_r11=((((-1.0)*r11*sj1*x667))+(((-1.0)*cj1*r01*x667))+((cj2*r21)));
new_r12=((((-1.0)*cj1*r02*x667))+(((-1.0)*r12*sj1*x667))+((cj2*r22)));
new_r20=(((r10*x671))+((r20*x662))+((r00*x672)));
new_r21=(((r01*x672))+((r11*x671))+((r21*x662)));
new_r22=(((r02*x672))+((r12*x671))+((r22*x662)));
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x673=(new_r22+(((-1.0)*cj5)));
IkReal x674=((((-1.0)*sj5))+new_r12);
IkReal x675=((1.0)*cj5);
IkReal x676=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x673;
evalcond[2]=x673;
evalcond[3]=new_r02;
evalcond[4]=x674;
evalcond[5]=x674;
evalcond[6]=(((cj5*new_r12))+(((-1.0)*new_r22*x676)));
evalcond[7]=((((-1.0)*new_r20*x675))+(((-1.0)*new_r10*x676)));
evalcond[8]=((((-1.0)*new_r21*x675))+(((-1.0)*new_r11*x676)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x675))+(((-1.0)*new_r12*x676)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x677=(sj2*sj3);
IkReal x678=(cj3*sj1);
IkReal x679=(cj3*sj2);
IkReal x680=(cj1*cj3);
IkReal x681=(sj1*sj3);
IkReal x682=((1.0)*sj2);
IkReal x683=(cj1*sj3);
IkReal x684=(((cj2*x678))+x683);
IkReal x685=x106;
IkReal x686=x107;
IkReal x687=(x678+((cj2*x683)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r00=(((r20*x679))+((r10*x684))+((r00*x685)));
new_r01=(((r21*x679))+((r01*x685))+((r11*x684)));
new_r02=(((r22*x679))+((r02*x685))+((r12*x684)));
new_r10=((((-1.0)*cj1*r00*x682))+((cj2*r20))+(((-1.0)*r10*sj1*x682)));
new_r11=((((-1.0)*r11*sj1*x682))+((cj2*r21))+(((-1.0)*cj1*r01*x682)));
new_r12=((((-1.0)*r12*sj1*x682))+(((-1.0)*cj1*r02*x682))+((cj2*r22)));
new_r20=(((r20*x677))+((r10*x686))+((r00*x687)));
new_r21=(((r21*x677))+((r01*x687))+((r11*x686)));
new_r22=(((r22*x677))+((r02*x687))+((r12*x686)));
IkReal x688=(cj3*sj1);
IkReal x689=((1.0)*r00);
IkReal x690=(sj2*sj3);
IkReal x691=(cj1*cj3);
IkReal x692=(cj2*sj1*sj3);
IkReal x693=(cj1*cj2*sj3);
j6eval[0]=((IKabs(((((-1.0)*r11*x691))+((r11*x692))+((r01*x688))+((r21*x690))+((r01*x693)))))+(IKabs(((((-1.0)*r10*x692))+(((-1.0)*x688*x689))+(((-1.0)*r20*x690))+((r10*x691))+(((-1.0)*x689*x693))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
IkReal x694=(sj2*sj3);
IkReal x695=(cj3*sj1);
IkReal x696=(cj3*sj2);
IkReal x697=(cj1*cj3);
IkReal x698=(sj1*sj3);
IkReal x699=((1.0)*sj2);
IkReal x700=(cj1*sj3);
IkReal x701=(x700+((cj2*x695)));
IkReal x702=x106;
IkReal x703=x107;
IkReal x704=(x695+((cj2*x700)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r00=(((r20*x696))+((r00*x702))+((r10*x701)));
new_r01=(((r01*x702))+((r21*x696))+((r11*x701)));
new_r02=(((r22*x696))+((r12*x701))+((r02*x702)));
new_r10=((((-1.0)*r10*sj1*x699))+((cj2*r20))+(((-1.0)*cj1*r00*x699)));
new_r11=((((-1.0)*cj1*r01*x699))+(((-1.0)*r11*sj1*x699))+((cj2*r21)));
new_r12=((((-1.0)*cj1*r02*x699))+(((-1.0)*r12*sj1*x699))+((cj2*r22)));
new_r20=(((r20*x694))+((r00*x704))+((r10*x703)));
new_r21=(((r01*x704))+((r21*x694))+((r11*x703)));
new_r22=(((r22*x694))+((r12*x703))+((r02*x704)));
IkReal x705=((1.0)*sj2);
j6eval[0]=((IKabs((((cj1*r01*sj2))+(((-1.0)*cj2*r21))+((r11*sj1*sj2)))))+(IKabs(((((-1.0)*r10*sj1*x705))+((cj2*r20))+(((-1.0)*cj1*r00*x705))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x706=IKPowWithIntegerCheck(new_r12,-1);
if(!x706.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x706.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x706.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x706.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x707=IKsin(j6);
IkReal x708=IKcos(j6);
IkReal x709=((1.0)*new_r12);
IkReal x710=((1.0)*x708);
evalcond[0]=(new_r20+((new_r12*x708)));
evalcond[1]=(new_r11+((new_r22*x707)));
evalcond[2]=((((-1.0)*x707*x709))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x710))+new_r10);
evalcond[4]=((((-1.0)*x707))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x710))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x709))+((new_r11*new_r22))+x707);
evalcond[7]=((((-1.0)*new_r20*x709))+(((-1.0)*x710))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x711 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),new_r10,IKFAST_ATAN2_MAGTHRESH);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712=IKPowWithIntegerCheck(IKsign(new_r22),-1);
if(!x712.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x711.value)+(((1.5707963267949)*(x712.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x713=IKsin(j6);
IkReal x714=IKcos(j6);
IkReal x715=((1.0)*new_r12);
IkReal x716=((1.0)*x714);
evalcond[0]=(new_r20+((new_r12*x714)));
evalcond[1]=(new_r11+((new_r22*x713)));
evalcond[2]=(new_r21+(((-1.0)*x713*x715)));
evalcond[3]=((((-1.0)*new_r22*x716))+new_r10);
evalcond[4]=((((-1.0)*x713))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x716))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x715))+((new_r11*new_r22))+x713);
evalcond[7]=((((-1.0)*new_r20*x715))+(((-1.0)*x716))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x717 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x717.valid){
continue;
}
CheckValue<IkReal> x718=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x718.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x717.value)+(((1.5707963267949)*(x718.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x719=IKsin(j6);
IkReal x720=IKcos(j6);
IkReal x721=((1.0)*new_r12);
IkReal x722=((1.0)*x720);
evalcond[0]=(((new_r12*x720))+new_r20);
evalcond[1]=(new_r11+((new_r22*x719)));
evalcond[2]=(new_r21+(((-1.0)*x719*x721)));
evalcond[3]=(new_r10+(((-1.0)*new_r22*x722)));
evalcond[4]=((((-1.0)*x719))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x722))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x721))+((new_r11*new_r22))+x719);
evalcond[7]=((((-1.0)*new_r20*x721))+(((-1.0)*x722))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x723=(new_r22+(((-1.0)*cj5)));
IkReal x724=((1.0)*cj5);
IkReal x725=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=x723;
evalcond[2]=x723;
evalcond[3]=new_r02;
evalcond[4]=(sj5+new_r12);
evalcond[5]=((((-1.0)*x725))+(((-1.0)*new_r12)));
evalcond[6]=((((-1.0)*new_r12*x724))+(((-1.0)*new_r22*x725)));
evalcond[7]=((((-1.0)*new_r20*x724))+((new_r10*sj5)));
evalcond[8]=((((-1.0)*new_r21*x724))+((new_r11*sj5)));
evalcond[9]=((1.0)+((new_r12*sj5))+(((-1.0)*new_r22*x724)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x726=IKsin(j6);
IkReal x727=IKcos(j6);
IkReal x728=((1.0)*new_r22);
IkReal x729=((1.0)*x727);
evalcond[0]=(((new_r12*x726))+new_r21);
evalcond[1]=((((-1.0)*x726))+new_r00);
evalcond[2]=((((-1.0)*x729))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x729))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((new_r22*x726)));
evalcond[5]=((((-1.0)*x727*x728))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r12*new_r21))+x726+(((-1.0)*new_r11*x728)));
evalcond[7]=((((-1.0)*x729))+((new_r12*new_r20))+(((-1.0)*new_r10*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x730=((1.0)*cj4);
IkReal x731=((1.0)*sj4);
IkReal x732=(((cj4*new_r12))+(((-1.0)*new_r02*x731)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x730))+new_r02);
evalcond[3]=((((-1.0)*x731))+new_r12);
evalcond[4]=x732;
evalcond[5]=x732;
evalcond[6]=((-1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[7]=(((cj4*new_r01))+((new_r11*sj4)));
evalcond[8]=(((cj4*new_r00))+((new_r10*sj4)));
evalcond[9]=((((-1.0)*new_r00*x730))+(((-1.0)*new_r10*x731)));
evalcond[10]=((((-1.0)*new_r01*x730))+(((-1.0)*new_r11*x731)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x731))+(((-1.0)*new_r02*x730)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x733=IKcos(j6);
IkReal x734=IKsin(j6);
IkReal x735=((1.0)*new_r12);
IkReal x736=((1.0)*x734);
IkReal x737=((1.0)*x733);
evalcond[0]=(x733+new_r20);
evalcond[1]=((((-1.0)*x736))+new_r21);
evalcond[2]=(new_r01+((new_r12*x733)));
evalcond[3]=(new_r00+((new_r12*x734)));
evalcond[4]=((((-1.0)*new_r02*x737))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x736))+new_r10);
evalcond[6]=((((-1.0)*x736))+((new_r02*new_r10))+(((-1.0)*new_r00*x735)));
evalcond[7]=((((-1.0)*x737))+((new_r02*new_r11))+(((-1.0)*new_r01*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x738=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x739=(((cj4*new_r00))+((new_r10*sj4)));
IkReal x740=(((cj4*new_r01))+((new_r11*sj4)));
IkReal x741=((1.0)+((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj4+new_r02);
evalcond[3]=(sj4+new_r12);
evalcond[4]=x738;
evalcond[5]=x738;
evalcond[6]=x741;
evalcond[7]=x740;
evalcond[8]=x739;
evalcond[9]=x739;
evalcond[10]=x740;
evalcond[11]=x741;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x742=IKcos(j6);
IkReal x743=IKsin(j6);
IkReal x744=((1.0)*new_r02);
IkReal x745=((1.0)*new_r12);
IkReal x746=((1.0)*x742);
evalcond[0]=(x743+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x746)));
evalcond[2]=(new_r11+((new_r02*x742)));
evalcond[3]=(new_r10+((new_r02*x743)));
evalcond[4]=((((-1.0)*x742*x745))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x743*x745)));
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x744))+(((-1.0)*x743)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x744))+(((-1.0)*x746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x747=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
IkReal x748=(((new_r12*sj4))+((cj4*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x747;
evalcond[7]=x747;
evalcond[8]=x748;
evalcond[9]=x748;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x749=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x749))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x749))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x749))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x749))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x750=IKsin(j6);
IkReal x751=IKcos(j6);
IkReal x752=((1.0)*sj4);
IkReal x753=((1.0)*x751);
IkReal x754=(sj4*x750);
IkReal x755=(sj4*x751);
IkReal x756=(cj4*x750);
IkReal x757=(cj4*x753);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x750);
evalcond[1]=(x755+x756+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x753)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x752))+(((-1.0)*x750)));
evalcond[4]=((((-1.0)*new_r01*x752))+((cj4*new_r11))+(((-1.0)*x753)));
evalcond[5]=(x754+new_r00+(((-1.0)*x757)));
evalcond[6]=(x754+new_r11+(((-1.0)*x757)));
evalcond[7]=((((-1.0)*x751*x752))+(((-1.0)*x756))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x758=(cj4*new_r02);
IkReal x759=(new_r12*sj4);
IkReal x760=((((-1.0)*new_r02*sj4))+((cj4*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x760;
evalcond[7]=x760;
evalcond[8]=(x759+x758);
evalcond[9]=((((-1.0)*x759))+(((-1.0)*x758)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x761=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x761))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x761))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x761))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x761))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x762=IKcos(j6);
IkReal x763=IKsin(j6);
IkReal x764=((1.0)*sj4);
IkReal x765=((1.0)*x763);
IkReal x766=(sj4*x762);
IkReal x767=((1.0)*x762);
IkReal x768=(cj4*x765);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x762);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x765)));
evalcond[2]=(((sj4*x763))+((cj4*x762))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x764))+((cj4*new_r10))+(((-1.0)*x765)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x767))+(((-1.0)*new_r01*x764)));
evalcond[5]=((((-1.0)*x768))+x766+new_r01);
evalcond[6]=((((-1.0)*x768))+x766+new_r10);
evalcond[7]=((((-1.0)*x763*x764))+new_r11+(((-1.0)*cj4*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x769=(new_r22+(((-1.0)*cj5)));
IkReal x770=((((-1.0)*sj5))+new_r02);
IkReal x771=((1.0)*cj5);
IkReal x772=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=x769;
evalcond[2]=x769;
evalcond[3]=x770;
evalcond[4]=new_r12;
evalcond[5]=x770;
evalcond[6]=((((-1.0)*new_r22*x772))+((cj5*new_r02)));
evalcond[7]=((((-1.0)*new_r00*x772))+(((-1.0)*new_r20*x771)));
evalcond[8]=((((-1.0)*new_r01*x772))+(((-1.0)*new_r21*x771)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x771))+(((-1.0)*new_r02*x772)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x773=IKcos(j6);
IkReal x774=IKsin(j6);
IkReal x775=((1.0)*new_r02);
IkReal x776=((1.0)*x773);
evalcond[0]=(((new_r02*x773))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x774)));
evalcond[2]=((((-1.0)*x776))+new_r11);
evalcond[3]=(((new_r22*x774))+new_r01);
evalcond[4]=((((-1.0)*x774*x775))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x776))+new_r00);
evalcond[6]=(((new_r01*new_r22))+(((-1.0)*new_r21*x775))+x774);
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*new_r20*x775))+(((-1.0)*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x777=(new_r22+(((-1.0)*cj5)));
IkReal x778=((1.0)*cj5);
IkReal x779=((1.0)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=x777;
evalcond[2]=x777;
evalcond[3]=(sj5+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*new_r02))+(((-1.0)*x779)));
evalcond[6]=((((-1.0)*new_r22*x779))+(((-1.0)*new_r02*x778)));
evalcond[7]=(((new_r00*sj5))+(((-1.0)*new_r20*x778)));
evalcond[8]=(((new_r01*sj5))+(((-1.0)*new_r21*x778)));
evalcond[9]=((1.0)+((new_r02*sj5))+(((-1.0)*new_r22*x778)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x780=(sj2*sj3);
IkReal x781=(cj3*sj1);
IkReal x782=(cj3*sj2);
IkReal x783=(cj1*cj3);
IkReal x784=(sj1*sj3);
IkReal x785=((1.0)*sj2);
IkReal x786=(cj1*sj3);
IkReal x787=(x786+((cj2*x781)));
IkReal x788=x106;
IkReal x789=x107;
IkReal x790=(x781+((cj2*x786)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r00=(((r00*x788))+((r20*x782))+((r10*x787)));
new_r01=(((r01*x788))+((r21*x782))+((r11*x787)));
new_r02=(((r02*x788))+((r22*x782))+((r12*x787)));
new_r10=((((-1.0)*cj1*r00*x785))+((cj2*r20))+(((-1.0)*r10*sj1*x785)));
new_r11=((((-1.0)*cj1*r01*x785))+(((-1.0)*r11*sj1*x785))+((cj2*r21)));
new_r12=((((-1.0)*r12*sj1*x785))+(((-1.0)*cj1*r02*x785))+((cj2*r22)));
new_r20=(((r00*x790))+((r20*x780))+((r10*x789)));
new_r21=(((r01*x790))+((r21*x780))+((r11*x789)));
new_r22=(((r02*x790))+((r22*x780))+((r12*x789)));
IkReal x791=((1.0)*sj1);
IkReal x792=(cj1*cj3);
IkReal x793=(sj2*sj3);
IkReal x794=(cj2*sj3);
j6eval[0]=((IKabs((((r20*x793))+((r10*sj1*x794))+((cj3*r00*sj1))+(((-1.0)*r10*x792))+((cj1*r00*x794)))))+(IKabs(((((-1.0)*r21*x793))+(((-1.0)*cj3*r01*x791))+((r11*x792))+(((-1.0)*cj1*r01*x794))+(((-1.0)*r11*x791*x794))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(new_r02,-1);
if(!x795.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x795.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x795.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x795.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x796=IKsin(j6);
IkReal x797=IKcos(j6);
IkReal x798=((1.0)*new_r01);
IkReal x799=((1.0)*new_r00);
IkReal x800=((1.0)*x797);
evalcond[0]=(((new_r02*x796))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x800))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x796)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x800)));
evalcond[4]=(((new_r22*x796))+(((-1.0)*x798)));
evalcond[5]=((((-1.0)*x799))+(((-1.0)*new_r22*x800)));
evalcond[6]=((((-1.0)*new_r22*x798))+x796+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x799))+((new_r02*new_r20))+(((-1.0)*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x801 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x801.valid){
continue;
}
CheckValue<IkReal> x802=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x802.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x801.value)+(((1.5707963267949)*(x802.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x803=IKsin(j6);
IkReal x804=IKcos(j6);
IkReal x805=((1.0)*new_r01);
IkReal x806=((1.0)*new_r00);
IkReal x807=((1.0)*x804);
evalcond[0]=(((new_r02*x803))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x807))+new_r20);
evalcond[2]=((((-1.0)*x803))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x807)));
evalcond[4]=(((new_r22*x803))+(((-1.0)*x805)));
evalcond[5]=((((-1.0)*new_r22*x807))+(((-1.0)*x806)));
evalcond[6]=((((-1.0)*new_r22*x805))+((new_r02*new_r21))+x803);
evalcond[7]=((((-1.0)*new_r22*x806))+((new_r02*new_r20))+(((-1.0)*x807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x809=IKPowWithIntegerCheck(sj5,-1);
if(!x809.valid){
continue;
}
IkReal x808=x809.value;
CheckValue<IkReal> x810=IKPowWithIntegerCheck(cj4,-1);
if(!x810.valid){
continue;
}
CheckValue<IkReal> x811=IKPowWithIntegerCheck(cj5,-1);
if(!x811.valid){
continue;
}
if( IKabs((x808*(x810.value)*(x811.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x808)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x808*(x810.value)*(x811.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x808))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x808*(x810.value)*(x811.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x808));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x812=IKsin(j6);
IkReal x813=IKcos(j6);
IkReal x814=((1.0)*sj5);
IkReal x815=((1.0)*sj4);
IkReal x816=(cj5*sj4);
IkReal x817=(cj4*new_r01);
IkReal x818=(cj4*new_r00);
IkReal x819=((1.0)*x813);
IkReal x820=(cj5*x812);
IkReal x821=((1.0)*x812);
evalcond[0]=(((sj5*x813))+new_r20);
evalcond[1]=((((-1.0)*x812*x814))+new_r21);
evalcond[2]=(((new_r11*sj4))+x817+x820);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x821))+(((-1.0)*new_r00*x815)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x819))+(((-1.0)*new_r01*x815)));
evalcond[5]=(((sj4*x813))+((cj4*x820))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x819))+x818);
evalcond[7]=(((sj4*x812))+(((-1.0)*cj4*cj5*x819))+new_r00);
evalcond[8]=(((x812*x816))+(((-1.0)*cj4*x819))+new_r11);
evalcond[9]=((((-1.0)*cj5*x813*x815))+(((-1.0)*cj4*x821))+new_r10);
evalcond[10]=(((new_r11*x816))+(((-1.0)*new_r21*x814))+((cj5*x817))+x812);
evalcond[11]=(((new_r10*x816))+(((-1.0)*x819))+(((-1.0)*new_r20*x814))+((cj5*x818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x823=IKPowWithIntegerCheck(sj5,-1);
if(!x823.valid){
continue;
}
IkReal x822=x823.value;
CheckValue<IkReal> x824=IKPowWithIntegerCheck(sj4,-1);
if(!x824.valid){
continue;
}
if( IKabs((x822*(x824.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x822)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x822*(x824.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x822))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x822*(x824.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x822));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x825=IKsin(j6);
IkReal x826=IKcos(j6);
IkReal x827=((1.0)*sj5);
IkReal x828=((1.0)*sj4);
IkReal x829=(cj5*sj4);
IkReal x830=(cj4*new_r01);
IkReal x831=(cj4*new_r00);
IkReal x832=((1.0)*x826);
IkReal x833=(cj5*x825);
IkReal x834=((1.0)*x825);
evalcond[0]=(((sj5*x826))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x825*x827)));
evalcond[2]=(((new_r11*sj4))+x830+x833);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x828))+(((-1.0)*x834)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x828))+(((-1.0)*x832)));
evalcond[5]=(((cj4*x833))+new_r01+((sj4*x826)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x832))+x831);
evalcond[7]=((((-1.0)*cj4*cj5*x832))+new_r00+((sj4*x825)));
evalcond[8]=(((x825*x829))+(((-1.0)*cj4*x832))+new_r11);
evalcond[9]=((((-1.0)*cj4*x834))+(((-1.0)*cj5*x826*x828))+new_r10);
evalcond[10]=(((new_r11*x829))+((cj5*x830))+(((-1.0)*new_r21*x827))+x825);
evalcond[11]=((((-1.0)*new_r20*x827))+((new_r10*x829))+((cj5*x831))+(((-1.0)*x832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x836.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x835.value)))+(x836.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x837=IKsin(j6);
IkReal x838=IKcos(j6);
IkReal x839=((1.0)*sj5);
IkReal x840=((1.0)*sj4);
IkReal x841=(cj5*sj4);
IkReal x842=(cj4*new_r01);
IkReal x843=(cj4*new_r00);
IkReal x844=((1.0)*x838);
IkReal x845=(cj5*x837);
IkReal x846=((1.0)*x837);
evalcond[0]=(((sj5*x838))+new_r20);
evalcond[1]=((((-1.0)*x837*x839))+new_r21);
evalcond[2]=(((new_r11*sj4))+x842+x845);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x846))+(((-1.0)*new_r00*x840)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x844))+(((-1.0)*new_r01*x840)));
evalcond[5]=(((sj4*x838))+((cj4*x845))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x844))+x843);
evalcond[7]=(((sj4*x837))+(((-1.0)*cj4*cj5*x844))+new_r00);
evalcond[8]=((((-1.0)*cj4*x844))+((x837*x841))+new_r11);
evalcond[9]=((((-1.0)*cj4*x846))+(((-1.0)*cj5*x838*x840))+new_r10);
evalcond[10]=(((cj5*x842))+(((-1.0)*new_r21*x839))+x837+((new_r11*x841)));
evalcond[11]=(((new_r10*x841))+((cj5*x843))+(((-1.0)*x844))+(((-1.0)*new_r20*x839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - BarrettWAM (b672bd38225d7880337a1361d0e85c28)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
